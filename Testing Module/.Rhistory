grid.arrange(p1, p2, nrow =2)
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
grid.arrange(p1, p2, nrow =2)
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1)
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1)
x <- ggplot(mapping = aes(x = 1:100, y = 1:100)) +
geom_line()
for(i in 1:6){
x <- x + geom_vline(aes_(xintercept = i*5))
}
x
x <- ggplot(mapping = aes(x = 1:100, y = 1:100)) +
geom_line()
for(i in 1:6){
x <- x + geom_vline(aes_(xintercept = i*5))
}
x
library(ggplot2)
a <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
b <- data.frame(x1=c(2,3),y1=c(10,10),x2=c(3,4),y2=c(15,15))
for (i in 1:nrow(b)) {
a <- a + geom_segment(arrow=arrow(),
mapping = aes(x=b[i,1],y=b[i,2],xend=b[i,3],yend=b[i,4]))
plot(a)
}
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1)
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
par(mfrow =c(2,1))
plot(fut$close, type ="l")
lines(fut$spline, col ="red")
points(df_points_buy$x, df_points_buy$y, col ="green", pch = 19)
points(df_points_sell$x, df_points_sell$y, col ="red", pch = 19)
plot(fut$deriv, type ="l", main = paste0("sign: ", fut$change_sign[nrow(fut)], " sign deriv: ", fut$sign_derivs[nrow(fut)], " deriv ", fut$deriv[nrow(fut)]))
abline(h =0)
par(mfrow =c(2,1))
plot(fut$close, type ="l", main = fut$Price)
lines(fut$spline, col ="red")
fut$Price
par(mfrow =c(2,1))
plot(fut$close, type ="l", main = tail(fut$Price, 1))
lines(fut$spline, col ="red")
points(df_points_buy$x, df_points_buy$y, col ="green", pch = 19)
points(df_points_sell$x, df_points_sell$y, col ="red", pch = 19)
plot(fut$deriv, type ="l", main = paste0("sign: ", fut$change_sign[nrow(fut)], " sign deriv: ", fut$sign_derivs[nrow(fut)], " deriv ", fut$deriv[nrow(fut)]))
abline(h =0)
par(mfrow =c(2,1))
plot(fut$close, type ="l", main = paste0("profits = ", tail(fut$Price, 1)))
lines(fut$spline, col ="red")
points(df_points_buy$x, df_points_buy$y, col ="green", pch = 19)
points(df_points_sell$x, df_points_sell$y, col ="red", pch = 19)
plot(fut$deriv, type ="l", main = paste0("sign: ", fut$change_sign[nrow(fut)], " sign deriv: ", fut$sign_derivs[nrow(fut)], " deriv ", fut$deriv[nrow(fut)]))
abline(h =0)
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
fut$sign_derivs
abline(h = 0, col = "red")
abline(h = 0, col = "red", type = "dashed")
abline(h = 0, col = "red", lty = 5)
par(mfrow =c(2,1))
plot(fut$close, type ="l", main = paste0("profits = ", tail(fut$Price, 1)))
lines(fut$spline, col ="red")
points(df_points_buy$x, df_points_buy$y, col ="green", pch = 19)
points(df_points_sell$x, df_points_sell$y, col ="red", pch = 19)
plot(fut$deriv, type ="l", main = paste0("sign: ",
" sign deriv: ", fut$sign_derivs[nrow(fut)], " deriv ", fut$deriv[nrow(fut)]))
abline(h = 0, col = "red", lty = 5)
abline(h = 0, col = "red", lty = 5, lwd = 2)
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1)
calculate_profits(myresult)
win_ratio(myresult)
fut
# Train and test datasets
train_data[, c("x",
"spline",
"deriv",
"sign_derivs",
"change_sign",
"exit_condition",
"action",
"Units",
"Price",
"tp",
"ult_sl",
"trail_sl",
"id") := list(NA,NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA) ]
test_data[, c("x",
"spline",
"deriv",
"sign_derivs",
"change_sign",
"exit_condition",
"action",
"Units",
"Price",
"tp",
"ult_sl",
"trail_sl",
"id") := list(NA,NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA) ]
fut <- rbind(train_data, test_data[i, ])
fut
fut$x <- 1:nrow(fut)
# Calculate spline - derivative
smoothingSpline = smooth.spline(fut[, close] ~ as.numeric(rownames(fut)) , spar = spar)
fut[, spline := predict(smoothingSpline)$y]
fut[, deriv := predict(smoothingSpline, deriv = 1)$y]
# Sign of deriv - [-2 for desc, 2 for asc]
fut[, sign_derivs := c(sign(deriv))]
fut[, change_sign := c(0, diff(sign(deriv)))]
df_points_buy <- data.frame(x = na.omit(fut$x[fut$action =="buy"]),
y = na.omit(fut$close[fut$action =="buy"]))
df_points_sell <- data.frame(x = na.omit(fut$x[fut$action =="sell"]),
y = na.omit(fut$close[fut$action == "sell"]))
par(mfrow = c(2, 1))
plot(fut$close, type ="l", main = paste0("profits = ", tail(fut$Price, 1)))
lines(fut$spline, col ="red")
points(df_points_buy$x, df_points_buy$y, col ="green", pch = 19)
points(df_points_sell$x, df_points_sell$y, col ="red", pch = 19)
par(mfrow = c(2, 1))
plot(fut$close, type ="l", main = paste0("profits = ", tail(na.omit(fut$Price), 1)))
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1)
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1,
plot.it = T)
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
?plot
iris
plot(Sepal.Length, Sepal.Width, data =iris=
plot(Sepal.Length, Sepal.Width, data =iris)
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1,
plot.it = T)
dev.off()
dev.off()
dev.off()
dev.off()
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.5,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1,
plot.it = T)
dev.off()
rm(list = ls())
source(paste("/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1", "10 Utils.R", sep = "/"))
setDTthreads(1)
# API info
api_info <- read.table(paste("/media/chris/DATA/Documents/Bot_Trading", "API_Keys.txt", sep = "/"), sep = ";", header = T)
API_Key <- as.character(api_info$API_Key)
API_Sign <- as.character(api_info$API_Sign)
# Choose pair
# pair <- "BTCEUR"
pair <- "XETHZEUR"
# Path to save results0
data_path <- "/media/chris/DATA/Documents/Bot_Trading/Historical_data"
# Create pair directory
dir.create(paste(data_path, pair, sep ="/"), showWarnings = FALSE)
# Fix path
pair_data_results <- paste(data_path, pair, sep ="/")
frame1 <- unique(frame)
rm(list = ls())
source(paste("/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1", "10 Utils.R", sep = "/"))
setDTthreads(1)
# Pulling historical data ------------------------------------------------------
# API info
api_info <- read.table(paste("/media/chris/DATA/Documents/Bot_Trading", "API_Keys.txt", sep = "/"), sep = ";", header = T)
API_Key <- as.character(api_info$API_Key)
API_Sign <- as.character(api_info$API_Sign)
# Choose pair
# pair <- "BTCEUR"
pair <- "XETHZEUR"
# Path to save results0
data_path <- "/media/chris/DATA/Documents/Bot_Trading/Historical_data"
# Create pair directory
dir.create(paste(data_path, pair, sep ="/"), showWarnings = FALSE)
# Fix path
pair_data_results <- paste(data_path, pair, sep ="/")
# Loading Data for operations --------------------------------------------------
options(digits = 5)
# Csv file saved with historical trades
file <- paste0(paste(pair_data_results, pair, sep = "/"), ".csv")
# Read it
frame <- fread(file)
# # Fix
frame[, Date_POSIXct := anytime(as.numeric(as.character(V3)))]
frame[, Time := strftime(Date_POSIXct, format = "%H:%M:%S")]
colnames(frame) <- c("price", "volume", "epoch_time", "buy_sell", "market_limit",
"miscellaneous", "last_id", "Date_POSIXct", "Time")
frame[, Date := as.Date(Date_POSIXct)]
frame[, Hour := substr(frame$Time, 1,5)]
frame[, miscellaneous := NULL]
frame1 <- unique(frame)
# frame1 <- subset(frame1, frame1$Date >= "2019-12-01" & frame1$Date <= "2020-06-01")
frame1 <- subset(frame1, frame1$Date >= "2020-07-01")
# Select interval
frame1[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '5 minutes') , format = '%H:%M:%S')]
# Create candle stick dataset
candles <- frame1[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
dim(candles)
# Plot asset and select how many intervals
par(mfrow=c(1,1))
plot_candlesticks(dta = candles, Ns = nrow(candles), asset = pair)
SR_lines(data = candles, roll = nrow(candles), n_sort = 100, pair = pair, Ns = nrow(candles))
abline(h = candles$close[nrow(candles)], lty = "dashed", col = "blue")
p1 <- ggplot(data= candles, aes(x=1:nrow(candles), y=close)) +
geom_line(alpha = 0.5);p1
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1,
plot.it = T)
dev.off()
dev.off()
dev.off()
frame1 <- unique(frame)
# frame1 <- subset(frame1, frame1$Date >= "2019-12-01" & frame1$Date <= "2020-06-01")
frame1 <- subset(frame1, frame1$Date >= "2020-07-01")
# Select interval
frame1[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '4 hours') , format = '%H:%M:%S')]
# Create candle stick dataset
candles <- frame1[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
dim(candles)
# Plot asset and select how many intervals
par(mfrow=c(1,1))
plot_candlesticks(dta = candles, Ns = nrow(candles), asset = pair)
SR_lines(data = candles, roll = nrow(candles), n_sort = 100, pair = pair, Ns = nrow(candles))
abline(h = candles$close[nrow(candles)], lty = "dashed", col = "blue")
p1 <- ggplot(data= candles, aes(x=1:nrow(candles), y=close)) +
geom_line(alpha = 0.5);p1
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1,
plot.it = T)
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.75,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1,
plot.it = T)
frame1 <- unique(frame)
# frame1 <- subset(frame1, frame1$Date >= "2019-12-01" & frame1$Date <= "2020-06-01")
frame1 <- subset(frame1, frame1$Date >= "2020-07-01")
# Select interval
frame1[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '30 minutes') , format = '%H:%M:%S')]
# Create candle stick dataset
candles <- frame1[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
dim(candles)
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1,
plot.it = T)
frame1 <- unique(frame)
# frame1 <- subset(frame1, frame1$Date >= "2019-12-01" & frame1$Date <= "2020-06-01")
frame1 <- subset(frame1, frame1$Date >= "2020-01-01")
# Select interval
frame1[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '60 minutes') , format = '%H:%M:%S')]
# Create candle stick dataset
candles <- frame1[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
dim(candles)
p1 <- ggplot(data= candles, aes(x=1:nrow(candles), y=close)) +
geom_line(alpha = 0.5);p1
frame1 <- unique(frame)
# frame1 <- subset(frame1, frame1$Date >= "2019-12-01" & frame1$Date <= "2020-06-01")
frame1 <- subset(frame1, frame1$Date >= "2019-06-01")
# Select interval
frame1[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '60 minutes') , format = '%H:%M:%S')]
# Create candle stick dataset
candles <- frame1[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
dim(candles)
p1 <- ggplot(data= candles, aes(x=1:nrow(candles), y=close)) +
geom_line(alpha = 0.5);p1
frame1 <- unique(frame)
# frame1 <- subset(frame1, frame1$Date >= "2019-12-01" & frame1$Date <= "2020-06-01")
frame1 <- subset(frame1, frame1$Date >= "2019-04-01")
# Select interval
frame1[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '60 minutes') , format = '%H:%M:%S')]
# Create candle stick dataset
candles <- frame1[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
dim(candles)
p1 <- ggplot(data= candles, aes(x=1:nrow(candles), y=close)) +
geom_line(alpha = 0.5);p1
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1,
plot.it = T)
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1,
plot.it = T)
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1,
plot.it = T)
dev.off()
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 0.03,
plot.it = T)
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1,
plot.it = F)
calculate_profits(myresult)
win_ratio(myresult)
