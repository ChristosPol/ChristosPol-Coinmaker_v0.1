for (i in 1:nrow(test_data)){
fut <- rbind(train_data, test_data[i, ])
fut$returns <- c(lag(diff(fut$close)), 0)
fut$UPDOWN <- as.factor(ifelse(fut$returns > 0, "UP", "DOWN"))
fut$RSI <- RSI(fut$close, n = 5)
macd <- MACD(fut[, "close"])
fut$macd <- macd[, "macd"]
fut$signal <- macd[, "signal"]
fut$mfi <- MFI(fut[,c("high","low","close")], fut[,"volume"])
fit1 <- predict(model1, tail(fut, 1))
fut$prediction[nrow(fut)] <- as.character(fit1)
# Deciding upon action -----------------------------------------------------
# Buy condition
if ( (is.na(fut$action[nrow(fut) - 1]) |  fut$action[nrow(fut) - 1] %in% c("sell", "no action")) &
(fut$prediction[nrow(fut)] ==  "UP")) {
fut$action[nrow(fut)] <- "buy"
fut$Units[nrow(fut)] <- initial_budget / fut$close[nrow(fut)]
fut$Price[nrow(fut)] <- fut$Units[nrow(fut)] * fut$close[nrow(fut)] - (0.0026 * fut$Units[nrow(fut)] * fut$close[nrow(fut)])
# fut$Price[nrow(fut)] <- fut$Units[nrow(fut)] * fut$close[nrow(fut)]
fut$id[nrow(fut)] <- round(runif(1, 10000, 5000000))
# Sell condition
} else if (fut$action[nrow(fut) - 1] %in% c("keep", "buy") & (
fut$prediction[nrow(fut)] ==  "DOWN")) {
fut$action[nrow(fut)] <- "sell"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1]
fut$Price[nrow(fut)] <- fut$close[nrow(fut)]* fut$Units[nrow(fut)]  - (0.0026 * fut$Units[nrow(fut)] * fut$close[nrow(fut)])
# fut$Price[nrow(fut)] <- fut$close[nrow(fut)]* fut$Units[nrow(fut)]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
initial_budget <- fut$Price[nrow(fut)]
# Keep condition
} else if ( fut$action[nrow(fut) - 1] %in% c("buy", "keep")   &
(fut$prediction[nrow(fut)] ==  "UP" )) {
fut$action[nrow(fut)] <- "keep"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1 ]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
} else {
fut$action[nrow(fut)] <- "no action"
}
train_data <- fut
# print(i)
print(i)
}
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 2)
train_n
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
test_data
train_data
# Or choose a single one
ticks <- c(60)
units <- c(rep("minutes", 1))
intervals <- paste(ticks, units, sep = " ")
# Load trades and conver to OHLC, applies filtering
klines <- trades_to_OHLC(pair = pair,
interval = intervals,
from_date = "2020-08-01",
to_date = "2020-09-01",
date_subset = T)
names(klines) <- gsub(" ", "_", intervals)
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 2)
train_n
# select period of data
candles_recent <- as.data.table(klines[[1]])
candles_recent
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 2)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
# Train and test datasets
train_data[, c("returns",
"UPDOWN",
"prediction",
"RSI",
"macd",
"signal",
"mfi",
"action",
"Units",
"Price",
"id") := list(NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA) ]
test_data[, c("returns",
"UPDOWN",
"prediction",
"RSI",
"macd",
"signal",
"mfi",
"action",
"Units",
"Price",
"id") := list(NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA) ]
# Going intro the loop for test data -----------------------------------------
for (i in 1:nrow(test_data)){
fut <- rbind(train_data, test_data[i, ])
fut$returns <- c(lag(diff(fut$close)), 0)
fut$UPDOWN <- as.factor(ifelse(fut$returns > 0, "UP", "DOWN"))
fut$RSI <- RSI(fut$close, n = 5)
macd <- MACD(fut[, "close"])
fut$macd <- macd[, "macd"]
fut$signal <- macd[, "signal"]
fut$mfi <- MFI(fut[,c("high","low","close")], fut[,"volume"])
fit1 <- predict(model1, tail(fut, 1))
fut$prediction[nrow(fut)] <- as.character(fit1)
# Deciding upon action -----------------------------------------------------
# Buy condition
if ( (is.na(fut$action[nrow(fut) - 1]) |  fut$action[nrow(fut) - 1] %in% c("sell", "no action")) &
(fut$prediction[nrow(fut)] ==  "UP")) {
fut$action[nrow(fut)] <- "buy"
fut$Units[nrow(fut)] <- initial_budget / fut$close[nrow(fut)]
fut$Price[nrow(fut)] <- fut$Units[nrow(fut)] * fut$close[nrow(fut)] - (0.0026 * fut$Units[nrow(fut)] * fut$close[nrow(fut)])
# fut$Price[nrow(fut)] <- fut$Units[nrow(fut)] * fut$close[nrow(fut)]
fut$id[nrow(fut)] <- round(runif(1, 10000, 5000000))
# Sell condition
} else if (fut$action[nrow(fut) - 1] %in% c("keep", "buy") & (
fut$prediction[nrow(fut)] ==  "DOWN")) {
fut$action[nrow(fut)] <- "sell"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1]
fut$Price[nrow(fut)] <- fut$close[nrow(fut)]* fut$Units[nrow(fut)]  - (0.0026 * fut$Units[nrow(fut)] * fut$close[nrow(fut)])
# fut$Price[nrow(fut)] <- fut$close[nrow(fut)]* fut$Units[nrow(fut)]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
initial_budget <- fut$Price[nrow(fut)]
# Keep condition
} else if ( fut$action[nrow(fut) - 1] %in% c("buy", "keep")   &
(fut$prediction[nrow(fut)] ==  "UP" )) {
fut$action[nrow(fut)] <- "keep"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1 ]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
} else {
fut$action[nrow(fut)] <- "no action"
}
train_data <- fut
# print(i)
print(i)
}
View(train_data)
initial_budget
initial_budget <- 200
plot.it <- F
# select period of data
candles_recent <- as.data.table(klines[[1]])
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 2)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
# Train and test datasets
train_data[, c("returns",
"UPDOWN",
"prediction",
"RSI",
"macd",
"signal",
"mfi",
"action",
"Units",
"Price",
"id") := list(NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA) ]
test_data[, c("returns",
"UPDOWN",
"prediction",
"RSI",
"macd",
"signal",
"mfi",
"action",
"Units",
"Price",
"id") := list(NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA) ]
# Going intro the loop for test data -----------------------------------------
for (i in 1:nrow(test_data)){
fut <- rbind(train_data, test_data[i, ])
fut$returns <- c(lag(diff(fut$close)), 0)
fut$UPDOWN <- as.factor(ifelse(fut$returns > 0, "UP", "DOWN"))
fut$RSI <- RSI(fut$close, n = 5)
macd <- MACD(fut[, "close"])
fut$macd <- macd[, "macd"]
fut$signal <- macd[, "signal"]
fut$mfi <- MFI(fut[,c("high","low","close")], fut[,"volume"])
fit1 <- predict(model1, tail(fut, 1))
fut$prediction[nrow(fut)] <- as.character(fit1)
# Deciding upon action -----------------------------------------------------
# Buy condition
if ( (is.na(fut$action[nrow(fut) - 1]) |  fut$action[nrow(fut) - 1] %in% c("sell", "no action")) &
(fut$prediction[nrow(fut)] ==  "UP")) {
fut$action[nrow(fut)] <- "buy"
fut$Units[nrow(fut)] <- initial_budget / fut$close[nrow(fut)]
fut$Price[nrow(fut)] <- fut$Units[nrow(fut)] * fut$close[nrow(fut)] - (0.0026 * fut$Units[nrow(fut)] * fut$close[nrow(fut)])
# fut$Price[nrow(fut)] <- fut$Units[nrow(fut)] * fut$close[nrow(fut)]
fut$id[nrow(fut)] <- round(runif(1, 10000, 5000000))
# Sell condition
} else if (fut$action[nrow(fut) - 1] %in% c("keep", "buy") & (
fut$prediction[nrow(fut)] ==  "DOWN")) {
fut$action[nrow(fut)] <- "sell"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1]
fut$Price[nrow(fut)] <- fut$close[nrow(fut)]* fut$Units[nrow(fut)]  - (0.0026 * fut$Units[nrow(fut)] * fut$close[nrow(fut)])
# fut$Price[nrow(fut)] <- fut$close[nrow(fut)]* fut$Units[nrow(fut)]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
initial_budget <- fut$Price[nrow(fut)]
# Keep condition
} else if ( fut$action[nrow(fut) - 1] %in% c("buy", "keep")   &
(fut$prediction[nrow(fut)] ==  "UP" )) {
fut$action[nrow(fut)] <- "keep"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1 ]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
} else {
fut$action[nrow(fut)] <- "no action"
}
train_data <- fut
# print(i)
print(i)
}
View(train_data)
calculate_profits(train_data)
calculate_profits(train_data)
myresult <- train_data
calculate_profits(myresult)
paraller_exec <- F
calculate_profits(myresult)
calculate_profits
dataset <- myresult
calcu <- dataset[action %in% c("buy", "sell"), ]
calcu
calcu <- subset(calcu,  !calcu$id %in% names(which(table(calcu$id) ==1)))
profit <- c()
ids <- unique(calcu$id)
for(i in 1:length(ids)){
profit[i] <-   calcu$Price[calcu$action =="sell" & calcu$id == ids[i]] - calcu$Price[calcu$action =="buy" & calcu$id == ids[i]]
}
profit
sum(profit)
profit1 <- tail(calcu$Price, 1)
profit1
calcu$Price
profit1
initial_budget
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 200
# select period of data
candles_recent <- as.data.table(klines[[1]])
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- cross_EMA_stoploss(EMA_fast = 75,
EMA_slow = 200,
EMA_volume = 10,
takeprofit = 0.2,
stoploss_ult = 1000, plot.it = F)
myresult <- cross_EMA_stoploss(EMA_fast = 10,
EMA_slow = 30,
EMA_volume = 10,
takeprofit = 0.2,
stoploss_ult = 1000, plot.it = F)
myresult <- cross_EMA_stoploss(EMA_fast = 10,
EMA_slow = 15,
EMA_volume = 10,
takeprofit = 0.2,
stoploss_ult = 1000, plot.it = F)
rm(list = ls())
# Preamble ---------------------------------------------------------------------
# screen -S pullingBTC R
.rs.restartR()
rm(list = ls())
### retire this git, go to binance
## Take best funtionalities from here move to binance
# Source functions
path_source <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Source"
files.sources = list.files(path_source, full.names = T)
sapply(files.sources, source)
# Choose which unix time to use for pulling data
# Choose from ["start_of_time", "manually", "latest_available"]
unix_time <- "start_of_time"
# Choose any pair to pull
pair <- "XETHZEUR"
# pair <- "ALGOEUR"
# pair <- "KAVAEUR"
# pair <- "GNOEUR"
# pair <- "ADAEUR"
# pair <- "STORJEUR"
# Path to save results
data_path <- "/media/chris/DATA/Documents/Bot_Trading/Historical_data"
# Create pair directory
dir.create(paste(data_path, pair, sep ="/"), showWarnings = FALSE)
# Fix path
pair_data_results <- paste(data_path, pair, sep ="/")
# Or choose a single one
ticks <- c(60)
units <- c(rep("minutes", 1))
intervals <- paste(ticks, units, sep = " ")
# Load trades and conver to OHLC, applies filtering
klines <- trades_to_OHLC(pair = pair,
interval = intervals,
from_date = "2017-06-01",
to_date = "2020-09-01",
date_subset = T)
names(klines) <- gsub(" ", "_", intervals)
library(randomForest)
library(e1071)
initial_budget <- 200
plot.it <- F
df <- klines[[1]]
df
df
df$EMA_close <- EMA(df$close, n =80)
df
df$EMA_close <- EMA(df$close, n = 150)
df$EMA_close
df$EMA_close <- round(EMA(df$close, n = 150))
df$EMA_close
df <- klines[[1]]
df$EMA_slow <- EMA(df$close, n = 150)
df
df$EMA_fast <- EMA(df$close, n = 75)
df
df$UPDOWN <- as.factor(ifelse(df$EMA_fast > df$EMA_slow, "UP", "DOWN"))
df
View(df)
# df$returns <- c(lag(diff(df$close)), 0)
# df$UPDOWN <- as.factor(ifelse(df$returns > 0, "UP", "DOWN"))
df$prediction <- shift(df$UPDOWN, type ="lead")
df
View(df)
df$RSI <- RSI(df$close, n = 10)
macd <- MACD(df[, "close"])
df <- cbind(df,macd)
df$mfi <- MFI(df[,c("high","low","close")], df[,"volume"])
df$obv <- OBV(df[, "close"], df[, "volume"])
# test data
test_n <- ceiling(nrow(df) / 30)
test_data <- tail(df, test_n)
# train data
train_data <- head(df, (nrow(df)-test_n))
# Fit a classifier
model1 <- randomForest(prediction ~ volume + RSI + close +
macd + signal + mfi,
data = na.omit(train_data), importance = T, ntree =1000)
model1
fit1 <- predict(model1, na.omit(test_data))
fit1
eval1 <- cbind(na.omit(test_data), fit1)
eval1
# eval1$actions <- ifelse(eval1$fit1 == "UP", 1, 0)
# eval1$position <- lag(eval1$action)
# eval1$profits <- eval1$returns * eval1$position
# sum(eval1$profits, na.rm = T)
table(eval1$prediction, eval1$fit)
sum(eval1$fit1 == eval1$UPDOWN)/nrow(eval1)
eval1$actions <- ifelse(eval1$fit1 == "UP", 1, 0)
eval1$position <- lag(eval1$action)
eval1$profits <- eval1$returns * eval1$position
sum(eval1$profits, na.rm = T)
eval1
eval1$profits
eval1$actions <- ifelse(eval1$fit1 == "UP", 1, 0)
eval1$actions
eval1$position <- lag(eval1$action)
eval1$position
eval1$profits <- eval1$returns * eval1$position
eval1 <- cbind(na.omit(test_data), fit1)
eval1
eval1$actions <- ifelse(eval1$fit1 == "UP", 1, 0)
eval1
eval1$position <- lag(eval1$action)
eval1
View(eval1)
eval1$position <- eval1$action
eval1
View(eval1)
eval1$profits <- eval1$returns * eval1$position
eval1$profits
eval1$returns
df$returns <- c(lag(diff(df$close)), 0)
eval1$profits <- eval1$returns * eval1$position
eval1$profits
eval1$returns
library(randomForest)
library(e1071)
df <- klines[[1]]
df$EMA_slow <- EMA(df$close, n = 150)
df$EMA_fast <- EMA(df$close, n = 75)
df$UPDOWN <- as.factor(ifelse(df$EMA_fast > df$EMA_slow, "UP", "DOWN"))
df$returns <- c(lag(diff(df$close)), 0)
# df$UPDOWN <- as.factor(ifelse(df$returns > 0, "UP", "DOWN"))
df$prediction <- shift(df$UPDOWN, type ="lead")
df$RSI <- RSI(df$close, n = 10)
macd <- MACD(df[, "close"])
df <- cbind(df,macd)
df$mfi <- MFI(df[,c("high","low","close")], df[,"volume"])
df$obv <- OBV(df[, "close"], df[, "volume"])
# test data
test_n <- ceiling(nrow(df) / 30)
test_data <- tail(df, test_n)
# train data
train_data <- head(df, (nrow(df)-test_n))
# Fit a classifier
model1 <- randomForest(prediction ~ volume + RSI + close +
macd + signal + mfi,
data = na.omit(train_data), importance = T, ntree =1000)
fit1 <- predict(model1, na.omit(test_data))
eval1 <- cbind(na.omit(test_data), fit1)
eval1$actions <- ifelse(eval1$fit1 == "UP", 1, 0)
eval1$position <- eval1$action
eval1$profits <- eval1$returns * eval1$position
eval1$profits
sum(eval1$profits, na.rm = T)
model1
fit1 <- predict(model1, na.omit(test_data))
eval1 <- cbind(na.omit(test_data), fit1)
sum(eval1$profits, na.rm = T)
table(eval1$prediction, eval1$fit)
sum(eval1$fit1 == eval1$UPDOWN)/nrow(eval1)
library(randomForest)
library(e1071)
df <- klines[[1]]
df$EMA_slow <- EMA(df$close, n = 150)
df$EMA_fast <- EMA(df$close, n = 75)
df$UPDOWN <- as.factor(ifelse(df$EMA_fast > df$EMA_slow, "UP", "DOWN"))
df$returns <- c(lag(diff(df$close)), 0)
# df$UPDOWN <- as.factor(ifelse(df$returns > 0, "UP", "DOWN"))
df$prediction <- shift(df$UPDOWN, type ="lead")
df$RSI <- RSI(df$close, n = 10)
macd <- MACD(df[, "close"])
df <- cbind(df,macd)
df$mfi <- MFI(df[,c("high","low","close")], df[,"volume"])
df$obv <- OBV(df[, "close"], df[, "volume"])
# test data
test_n <- ceiling(nrow(df) / 30)
test_data <- tail(df, test_n)
# train data
train_data <- head(df, (nrow(df)-test_n))
# Fit a classifier
model1 <- randomForest(prediction ~ volume + RSI + close +
macd + signal + mfi,
data = na.omit(train_data), importance = T, ntree =1000)
fit1 <- predict(model1, na.omit(test_data))
eval1 <- cbind(na.omit(test_data), fit1)
eval1
eval1$actions <- ifelse(eval1$fit1 == "UP", 1, 0)
Ωιες*eval1
View(eval1)
eval1$position <- lag(eval1$action)
View(eval1)
eval1$position <- shit(eval1$action, type = "lead")
eval1$position <- shift(eval1$action, type = "lead")
View(eval1)
eval1$position <- eval1$action
View(eval1)
# select period of data
candles_recent <- as.data.table(klines[[1]])
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 2)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
# Train and test datasets
train_data[, c("returns",
"UPDOWN",
"prediction",
"RSI",
"macd",
"signal",
"mfi",
"action",
"Units",
"Price",
"id") := list(NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA) ]
test_data[, c("returns",
"UPDOWN",
"prediction",
"RSI",
"macd",
"signal",
"mfi",
"action",
"Units",
"Price",
"id") := list(NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA) ]
i<- 1
fut <- rbind(train_data, test_data[i, ])
fut
fut$returns <- c(lag(diff(fut$close)), 0)
fut$returns
fut$UPDOWN <- as.factor(ifelse(fut$returns > 0, "UP", "DOWN"))
fut
fut$RSI <- RSI(fut$close, n = 5)
macd <- MACD(fut[, "close"])
fut$macd <- macd[, "macd"]
fut$signal <- macd[, "signal"]
fut$mfi <- MFI(fut[,c("high","low","close")], fut[,"volume"])
fit1 <- predict(model1, tail(fut, 1))
fut$prediction[nrow(fut)] <- as.character(fit1)
fut
