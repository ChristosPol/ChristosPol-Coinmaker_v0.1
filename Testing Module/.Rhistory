testing_params <- left_join(spar, takeprofit) %>%
left_join(stoploss_trail)%>% left_join(stoploss_ult)
testing_params$flag <- NULL
testing_params <- as.data.table(testing_params)
library("doParallel")
library("foreach")
paraller_exec <- TRUE
cl <- parallel::makeForkCluster(3)
doParallel::registerDoParallel(cl)
start_time <- Sys.time()
results <- foreach(i = 1:nrow(testing_params), .combine = 'rbind') %dopar% {
myresult <- Splines_Tangent(spar = testing_params$spar[i],
takeprofit = testing_params$takeprofit[i],
stoploss_trail = testing_params$stoploss_trail[i],
stoploss_ult = testing_params$stoploss_ult[i],
plot.it = FALSE)
params <- paste(spar = testing_params$spar[i],
takeprofit = testing_params$takeprofit[i],
stoploss_trail = testing_params$stoploss_trail[i],
stoploss_ult = testing_params$stoploss_ult[i],
stoploss_ult =  round(win_ratio(myresult),2),
sep ="_")
res <- calculate_profits(myresult, params = params)
gc()
res
}
end_time <- Sys.time()
end_time - start_time
parallel::stopCluster(cl)
# Sloppy solution for fees
results$clean_profit <-results$profit - (2*(20*(0.26/100)) * results$n_trades)
best_params <- results$params[which.max(results$clean_profit)]
pr <- results$profit[results$params == best_params]
cl_pr <- results$clean_profit[results$params == best_params]
n <- results$n_trades[results$params == best_params]
best_params <- strsplit(best_params, "_")
best_params  <- data.frame(spar = best_params[[1]][1],
takeprofit = best_params[[1]][2],
stoploss_trail = best_params[[1]][3],
stoploss_ult = best_params[[1]][4],
winratio = best_params[[1]][5],
pr = pr,
cl_pr = cl_pr,
n  = n,
time = timestamp())
write.table(best_params, file = paste(pair_param_results, paste0(pair, "_bestparams.csv"), sep ="/" ),
row.names = FALSE,
col.names = FALSE,
append = TRUE,
sep = ",")
}
##------ Mon Sep 14 19:36:39 2020 ------##
##------ Mon Sep 14 19:50:25 2020 ------##
##------ Mon Sep 14 20:04:04 2020 ------##
##------ Mon Sep 14 20:24:50 2020 ------##
##------ Mon Sep 14 20:36:21 2020 ------##
##------ Mon Sep 14 20:48:27 2020 ------##
##------ Mon Sep 14 21:02:38 2020 ------##
##------ Mon Sep 14 21:16:01 2020 ------##
##------ Mon Sep 14 21:25:59 2020 ------##
##------ Mon Sep 14 21:36:44 2020 ------##
##------ Mon Sep 14 21:51:30 2020 ------##
##------ Mon Sep 14 22:02:07 2020 ------##
##------ Mon Sep 14 22:28:11 2020 ------##
##------ Mon Sep 14 22:36:53 2020 ------##
##------ Mon Sep 14 22:46:22 2020 ------##
##------ Mon Sep 14 22:59:22 2020 ------##
##------ Mon Sep 14 23:14:51 2020 ------##
##------ Mon Sep 14 23:28:18 2020 ------##
##------ Mon Sep 14 23:41:40 2020 ------##
##------ Mon Sep 14 23:54:39 2020 ------##
##------ Tue Sep 15 00:09:55 2020 ------##
##------ Tue Sep 15 00:26:11 2020 ------##
##------ Tue Sep 15 00:39:45 2020 ------##
##------ Tue Sep 15 00:55:37 2020 ------##
##------ Tue Sep 15 02:07:59 2020 ------##
##------ Tue Sep 15 02:26:54 2020 ------##
##------ Tue Sep 15 02:40:12 2020 ------##
##------ Tue Sep 15 03:01:19 2020 ------##
##------ Tue Sep 15 05:18:35 2020 ------##
##------ Tue Sep 15 05:32:13 2020 ------##
##------ Tue Sep 15 05:44:59 2020 ------##
##------ Tue Sep 15 06:12:56 2020 ------##
##------ Tue Sep 15 06:25:25 2020 ------##
source(paste("/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1", "10 Utils.R", sep = "/"))
setDTthreads(1)
api_info <- read.table(paste("/media/chris/DATA/Documents/Bot_Trading", "API_Keys.txt", sep = "/"), sep = ";", header = T)
API_Key <- as.character(api_info$API_Key)
API_Sign <- as.character(api_info$API_Sign)
avail_pairs <- myfun("https://api.kraken.com/0/public/AssetPairs", secret = API_Sign, key = API_Key)
all_pairs <- names(avail_pairs[[2]])
all_pairs
trading_table_path <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Trading Module/Trading_Table/"
# Get only EUR related crypto pairs
EUR_pairs <- grep("EUR", all_pairs, value = T)
# Remove Forex pairs
to_remove <- grep(paste(c("USD",
".d",
"AUD",
"CAD",
"JPY",
"CHF",
"GBP",
"REP",
"PAX",
"DAI",
"BAT"), collapse ="|"), EUR_pairs, value = T)
EUR_pairs <- EUR_pairs[!EUR_pairs %in% to_remove]
EUR_pairs
i <- 1
params_path <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Parameter optimization/Parameters_multi/"
list.files(params_path)
i <- 1
EUR_pairs[1
EUR_pairs[1]
EUR_pairs[1]
paste0(params_path, EUR_pairs[1])
list.files(paste0(params_path, EUR_pairs[1]))
list.files(paste0(params_path, EUR_pairs[1]), full.names = T)
params <- read.table( list.files(paste0(params_path, EUR_pairs[1]), full.names = T,
header = TRUE,
sep = ",", stringsAsFactors = FALSE)
df <- simple_OHLC(interval = 15, pair = EUR_pairs[i])
# Remove last row as its the candle that still ongoing
df <- df[-nrow(df), ]
df$servertime <- 0
df$systemtime <- 0
servertime <- myfun("https://api.kraken.com/0/public/Time", API_Key, API_Sign)
df$servertime[nrow(df)] <- as.character(servertime$result$rfc1123)
df$systemtime[nrow(df)] <- as.character(Sys.time())
# 2. Add Indicators
df[, c("x",
"spline",
"deriv",
"sign_derivs",
"change_sign",
"exit_condition",
"action",
"Units",
"Price",
"tp",
"ult_sl",
"trail_sl",
"id") := list(NA,NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA) ]
df$action <- as.character(df$action)
df$x <- 1:nrow(df)
# Calculate spline - derivative
smoothingSpline = smooth.spline(df[, close] ~ as.numeric(rownames(df)), spar = spar)
df[, spline := predict(smoothingSpline)$y]
df[, deriv := predict(smoothingSpline, deriv = 1)$y]
# Sign of deriv - [-2 for desc, 2 for asc]
df[, sign_derivs := c(sign(deriv))]
df[, change_sign := c(0, diff(sign(deriv)))]
lastrow <- df[nrow(df), ]
if(file.exists(paste0(trading_table_path, EUR_pairs[i], "_table.csv") )){
tmp <- read.table(paste0(trading_table_path, EUR_pairs[i], "_table.csv"),
header = FALSE,
sep = ",", stringsAsFactors = FALSE)
colnames(tmp) <- colnames(lastrow)
da <- rbind(tmp, lastrow)
} else {
da <- lastrow
}
# Exit condition for takeprofit  - Fixed
tp <- tail(da$close[da$action == "buy"][!is.na(da$close[da$action == "buy"])], 1) + takeprofit * tail(da$close[da$action == "buy"][!is.na(da$close[da$action == "buy"])], 1)
if (length(tp) == 0) {
tp <- 0
}
# Ultimate stop loss
ult_sl <- tail(da$close[da$action == "buy"][!is.na(da$close[da$action == "buy"])], 1) - stoploss_ult * tail(da$close[da$action == "buy"][!is.na(da$close[da$action == "buy"])], 1)
if (length(ult_sl) == 0) {
ult_sl <- 0
}
if(nrow(da) > 1 ){
# Trailing stop loss
# browser()
if (da$action[nrow(da)-1] %in% c("buy", "keep") & ( da$close[nrow(da)] > da$close[nrow(da)-1] )  ){
trail_sl <- da$close[nrow(da)] - stoploss_trail * da$close[nrow(da)]
if( trail_sl < tail(da$trail_sl[!is.na(da$trail_sl)], 1)){
trail_sl <- tail(da$trail_sl[!is.na(da$trail_sl)], 1)
} else {
trail_sl <- da$close[nrow(da)] - stoploss_trail * da$close[nrow(da)]
}
} else if (da$action[nrow(da)-1] %in% c("buy", "keep") & ( da$close[nrow(da)] <= da$close[nrow(da)-1] ) ){
trail_sl <- tail(da$trail_sl[!is.na(da$trail_sl)], 1)
} else {
trail_sl <-0
}
if(length(trail_sl) == 0 ){
trail_sl <- 0
}
} else {
trail_sl <-0
}
if(length(trail_sl) == 0 ){
trail_sl <- 0
}
da$tp[nrow(da)] <- tp
da$ult_sl[nrow(da)] <- ult_sl
da$trail_sl[nrow(da)] <- trail_sl
da$exit_condition[nrow(da)] <- da$trail_sl[nrow(da)] > da$close[nrow(da)] | da$ult_sl[nrow(da)] > da$close[nrow(da)] | da$tp[nrow(da)] < da$close[nrow(da)]
if (nrow(da) > 1) {
# BUY Condition ------------------------------------------------------------
if ((is.na(da$action[nrow(da) - 1]) | da$action[nrow(da) - 1] %in% c("sell", "no action")) &
da$deriv[nrow(da)] > 0){
# get initial balance in EUR
# init_balance <- get_balance(url = "https://api.kraken.com/0/private/Balance",
#                             key = API_Key, secret = API_Sign)
# initial_budget <- as.numeric(init_balance$result$ZEUR)
# initial_budget <- initial_budget - 10
initial_budget <- 500
# Give API Order to buy at market
# buy_it <- add_market_order(url = "https://api.kraken.com/0/private/AddOrder",
#                            key = API_Key, secret = API_Sign, pair = pair, type = "buy",
#                            ordertype = "market", volume = initial_budget / da$close[nrow(da)])
# print(buy_it)
da$action[nrow(da)] <- "buy"
da$Units[nrow(da)] <- initial_budget / da$close[nrow(da)]
da$Price[nrow(da)] <- da$Units[nrow(da)]*da$close[nrow(da)]
# da$id[nrow(da)] <- buy_it$result$txid
da$id[nrow(da)] <- round(runif(1, 10000, 5000000))
# KEEP condition
} else if (  da$action[nrow(da) - 1] %in% c("buy", "keep")   &
da$exit_condition[nrow(da)] == FALSE ) {
da$action[nrow(da)] <- "keep"
da$Units[nrow(da)] <- da$Units[nrow(da) -1 ]
da$id[nrow(da)] <- da$id[nrow(da)-1]
# SELL condition
} else if (da$action[nrow(da) - 1] %in% c("keep", "buy") & (
da$exit_condition[nrow(da)] == TRUE | da$deriv[nrow(da)] < 0 ) ) {
# crypto_hold <- get_balance(url = "https://api.kraken.com/0/private/Balance",
#                            key = API_Key, secret = API_Sign)
# crypto_hold_eth <- as.numeric(crypto_hold$result$XETH)
# # Give API Order to buy at market
# sell_it <- add_market_order(url = "https://api.kraken.com/0/private/AddOrder",
#                             key = API_Key, secret = API_Sign, pair = pair, type = "sell",
#                             ordertype = "market", volume = crypto_hold_eth)
# print(sell_it)
da$action[nrow(da)] <- "sell"
da$Units[nrow(da)] <- da$Units[nrow(da) -1]
da$Price[nrow(da)] <- da$close[nrow(da)]* da$Units[nrow(da)]
# da$id[nrow(da)] <- sell_it$result$txid
# da$id[nrow(da)] <- round(runif(1, 10000, 5000000))
da$id[nrow(da)] <- da$id[nrow(da)-1]
} else {
da$action[nrow(da)] <- "no action"
}
} else {
da$action[nrow(da)] <- "no action"
}
write.table(da[nrow(da), ], file = paste0(trading_table_path, EUR_pairs[i], "_table.csv"),
row.names = FALSE,
col.names = FALSE,
append = TRUE,
sep = ",")
Sys.sleep(4)
}
rm(list=ls())
source(paste("/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1", "10 Utils.R", sep = "/"))
setDTthreads(1)
api_info <- read.table(paste("/media/chris/DATA/Documents/Bot_Trading", "API_Keys.txt", sep = "/"), sep = ";", header = T)
API_Key <- as.character(api_info$API_Key)
API_Sign <- as.character(api_info$API_Sign)
avail_pairs <- myfun("https://api.kraken.com/0/public/AssetPairs", secret = API_Sign, key = API_Key)
all_pairs <- names(avail_pairs[[2]])
trading_table_path <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Trading Module/Trading_Table/"
params_path <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Parameter optimization/Parameters_multi/"
# Get only EUR related crypto pairs
EUR_pairs <- grep("EUR", all_pairs, value = T)
# Remove Forex pairs
to_remove <- grep(paste(c("USD",
".d",
"AUD",
"CAD",
"JPY",
"CHF",
"GBP",
"REP",
"PAX",
"DAI",
"BAT"), collapse ="|"), EUR_pairs, value = T)
EUR_pairs <- EUR_pairs[!EUR_pairs %in% to_remove]
i <- 1
params <- read.table( list.files(paste0(params_path, EUR_pairs[1]), full.names = T),
header = TRUE,
sep = ",", stringsAsFactors = FALSE)
params
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Trading Module/Multi_EUR_pair_Live_Trading.R', echo=TRUE)
params <- read.table(list.files(paste0(params_path, EUR_pairs[1]), full.names = T),
header = FALSE,
sep = ",", stringsAsFactors = FALSE)
params
rm£(list=ls())
rm(list=ls())
source(paste("/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1", "10 Utils.R", sep = "/"))
setDTthreads(1)
api_info <- read.table(paste("/media/chris/DATA/Documents/Bot_Trading", "API_Keys.txt", sep = "/"), sep = ";", header = T)
API_Key <- as.character(api_info$API_Key)
API_Sign <- as.character(api_info$API_Sign)
avail_pairs <- myfun("https://api.kraken.com/0/public/AssetPairs", secret = API_Sign, key = API_Key)
all_pairs <- names(avail_pairs[[2]])
trading_table_path <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Trading Module/Trading_Table/"
params_path <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Parameter optimization/Parameters_multi/"
# Get only EUR related crypto pairs
EUR_pairs <- grep("EUR", all_pairs, value = T)
# Remove Forex pairs
to_remove <- grep(paste(c("USD",
".d",
"AUD",
"CAD",
"JPY",
"CHF",
"GBP",
"REP",
"PAX",
"DAI",
"BAT"), collapse ="|"), EUR_pairs, value = T)
EUR_pairs <- EUR_pairs[!EUR_pairs %in% to_remove]
i <- 1
params <- read.table(list.files(paste0(params_path, EUR_pairs[1]), full.names = T),
header = FALSE,
sep = ",", stringsAsFactors = FALSE)
params
colnames(params) <- c("spar", "takeprofit", "stoploss_trail", "stoploss_ult",
"winratio", "pr", "cl_pr", "n", "time")
params
spar <- params$spar
takeprofit <- params$takeprofit
stoploss_trail <- params$stoploss_trail
stoploss_ult <- params$stoploss_ult
spar
takeprofit
stoploss_trail
stoploss_ult
i <- 2
# Parameters
params <- read.table(list.files(paste0(params_path, EUR_pairs[1]), full.names = T),
header = FALSE,
sep = ",", stringsAsFactors = FALSE)
colnames(params) <- c("spar", "takeprofit", "stoploss_trail", "stoploss_ult",
"winratio", "pr", "cl_pr", "n", "time")
params
i <- 3
# Parameters
params <- read.table(list.files(paste0(params_path, EUR_pairs[1]), full.names = T),
header = FALSE,
sep = ",", stringsAsFactors = FALSE)
colnames(params) <- c("spar", "takeprofit", "stoploss_trail", "stoploss_ult",
"winratio", "pr", "cl_pr", "n", "time")
params
i <- 3
# Parameters
params <- read.table(list.files(paste0(params_path, EUR_pairs[i]), full.names = T),
header = FALSE,
sep = ",", stringsAsFactors = FALSE)
colnames(params) <- c("spar", "takeprofit", "stoploss_trail", "stoploss_ult",
"winratio", "pr", "cl_pr", "n", "time")
params
rm(list=ls())
source(paste("/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1", "10 Utils.R", sep = "/"))
setDTthreads(1)
api_info <- read.table(paste("/media/chris/DATA/Documents/Bot_Trading", "API_Keys.txt", sep = "/"), sep = ";", header = T)
API_Key <- as.character(api_info$API_Key)
API_Sign <- as.character(api_info$API_Sign)
avail_pairs <- myfun("https://api.kraken.com/0/public/AssetPairs", secret = API_Sign, key = API_Key)
all_pairs <- names(avail_pairs[[2]])
trading_table_path <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Trading Module/Trading_Table/"
params_path <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Parameter optimization/Parameters_multi/"
# Get only EUR related crypto pairs
EUR_pairs <- grep("EUR", all_pairs, value = T)
# Remove Forex pairs
to_remove <- grep(paste(c("USD",
".d",
"AUD",
"CAD",
"JPY",
"CHF",
"GBP",
"REP",
"PAX",
"DAI",
"BAT"), collapse ="|"), EUR_pairs, value = T)
EUR_pairs <- EUR_pairs[!EUR_pairs %in% to_remove]
EUR_pairs
i <- 3
# Parameters
params <- read.table(list.files(paste0(params_path, EUR_pairs[i]), full.names = T),
header = FALSE,
sep = ",", stringsAsFactors = FALSE)
params
colnames(params) <- c("spar", "takeprofit", "stoploss_trail", "stoploss_ult",
"winratio", "pr", "cl_pr", "n", "time")
spar <- params$spar
takeprofit <- params$takeprofit
stoploss_trail <- params$stoploss_trail
stoploss_ult <- params$stoploss_ult
df <- simple_OHLC(interval = 15, pair = EUR_pairs[i])
# Remove last row as its the candle that still ongoing
df <- df[-nrow(df), ]
df$servertime <- 0
df$systemtime <- 0
servertime <- myfun("https://api.kraken.com/0/public/Time", API_Key, API_Sign)
df$servertime[nrow(df)] <- as.character(servertime$result$rfc1123)
df$systemtime[nrow(df)] <- as.character(Sys.time())
# 2. Add Indicators
df[, c("x",
"spline",
"deriv",
"sign_derivs",
"change_sign",
"exit_condition",
"action",
"Units",
"Price",
"tp",
"ult_sl",
"trail_sl",
"id") := list(NA,NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA) ]
df$action <- as.character(df$action)
df$x <- 1:nrow(df)
# Calculate spline - derivative
smoothingSpline = smooth.spline(df[, close] ~ as.numeric(rownames(df)), spar = spar)
df[, spline := predict(smoothingSpline)$y]
df[, deriv := predict(smoothingSpline, deriv = 1)$y]
df
# Sign of deriv - [-2 for desc, 2 for asc]
df[, sign_derivs := c(sign(deriv))]
df[, change_sign := c(0, diff(sign(deriv)))]
lastrow <- df[nrow(df), ]
trading_table_path
# Description ------------------------------------------------------------------
# Scheduler for trading at the end of each candle and not intra-candle
library(cronR)
# Path of live trading Rscript
# path <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Trading Module/Live_trading.R"
path <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Trading Module/Multi_EUR_pair_Live_Trading.R"
# Command
cmd <- cron_rscript(path)
# add frequency and intervals
cron_add(cmd, frequency = '*/60 * * * *', id = 'Live trading', description = 'Live trading', at = '16:00')
trading_table_path <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Trading Module/Trading_Table/"
dirs <- list.files(trading_table_path, full.names = T)
pair_names <- gsub("_table.csv", "",list.files(trading_table_path))
trade_tables <- lapply(dirs, function(x){read.table(x, header = FALSE,
sep = ",", stringsAsFactors = FALSE)}  )
names(trade_tables) <- pair_names
columns <- c("time", "open", "high", "low", "close",
"vwap", "volume", "count", "Date_POSIXct", "servertime",
"systemtime", "x", "spline", "deriv", "sign_derivs",
"change_sign", "exit_condition", "action", "Units", "Price",
"tp", "ult_sl", "trail_sl", "id" )
trade_tables <- lapply(trade_tables, setNames, columns)
for(i in 1:length(trade_tables)){
trade_tables[[i]]$pair <- pair_names[i]
}
all_trade_tables <- do.call(rbind, trade_tables)
all_trade_tables$Price_all <- all_trade_tables$close*all_trade_tables$Units
rownames(all_trade_tables) <- NULL
View(all_trade_tables)
trading_table_path <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Trading Module/Trading_Table/"
dirs <- list.files(trading_table_path, full.names = T)
pair_names <- gsub("_table.csv", "",list.files(trading_table_path))
trade_tables <- lapply(dirs, function(x){read.table(x, header = FALSE,
sep = ",", stringsAsFactors = FALSE)}  )
names(trade_tables) <- pair_names
columns <- c("time", "open", "high", "low", "close",
"vwap", "volume", "count", "Date_POSIXct", "servertime",
"systemtime", "x", "spline", "deriv", "sign_derivs",
"change_sign", "exit_condition", "action", "Units", "Price",
"tp", "ult_sl", "trail_sl", "id" )
trade_tables <- lapply(trade_tables, setNames, columns)
for(i in 1:length(trade_tables)){
trade_tables[[i]]$pair <- pair_names[i]
}
all_trade_tables <- do.call(rbind, trade_tables)
all_trade_tables$Price_all <- all_trade_tables$close*all_trade_tables$Units
rownames(all_trade_tables) <- NULL
View(all_trade_tables)
# Check all jobs
cron_ls()
# Stop Job
# cron_clear(ask = FALSE)
cron_rm(id = "Live trading")
# Description ------------------------------------------------------------------
# Scheduler for trading at the end of each candle and not intra-candle
library(cronR)
# Path of live trading Rscript
# path <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Trading Module/Live_trading.R"
path <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Trading Module/Multi_EUR_pair_Live_Trading.R"
# Command
cmd <- cron_rscript(path)
# add frequency and intervals
cron_add(cmd, frequency = '*/60 * * * *', id = 'Live trading', description = 'Live trading', at = '19:00')
trading_table_path <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Trading Module/Trading_Table/"
dirs <- list.files(trading_table_path, full.names = T)
pair_names <- gsub("_table.csv", "",list.files(trading_table_path))
trade_tables <- lapply(dirs, function(x){read.table(x, header = FALSE,
sep = ",", stringsAsFactors = FALSE)}  )
names(trade_tables) <- pair_names
columns <- c("time", "open", "high", "low", "close",
"vwap", "volume", "count", "Date_POSIXct", "servertime",
"systemtime", "x", "spline", "deriv", "sign_derivs",
"change_sign", "exit_condition", "action", "Units", "Price",
"tp", "ult_sl", "trail_sl", "id" )
trade_tables <- lapply(trade_tables, setNames, columns)
for(i in 1:length(trade_tables)){
trade_tables[[i]]$pair <- pair_names[i]
}
all_trade_tables <- do.call(rbind, trade_tables)
all_trade_tables$Price_all <- all_trade_tables$close*all_trade_tables$Units
rownames(all_trade_tables) <- NULL
View(all_trade_tables)
