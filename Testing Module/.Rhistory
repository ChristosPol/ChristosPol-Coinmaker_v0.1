df$crossover[get(paste0("EMA", "_", fast_EMA), df) > get(paste0("EMA", "_", slow_EMA), df)] <- 1
print(tail(df, 1))
Sys.sleep(interval*60)
}
}
# Strategy 2 -------------------------------------------------------------------
# Crossing fast ema to slower with stoploss condition
cross_EMA_stoploss_trail <- function(fast_EMA, slow_EMA,takeprofit, stoploss_trail,stoploss_ult) {
# Train and test datasets$
train_data[, c(paste0("EMA", "_", fast_EMA),
paste0("EMA", "_", slow_EMA),
"exit_value","exit_condition",
"crossover",
"crossover_Volume",
"action",
"tp",
"ult_sl",
"trail_sl",
"Units",
"Price",
"id") := list(NA, NA,NA,NA,NA, NA, NA, NA, NA, NA, NA, NA, NA) ]
test_data[, c(paste0("EMA", "_", fast_EMA),
paste0("EMA", "_", slow_EMA),
"exit_value",
"exit_condition",
"crossover",
"crossover_Volume",
"action",
"tp",
"ult_sl",
"trail_sl",
"Units",
"Price",
"id") := list(NA, NA, NA,NA,NA,NA, NA, NA, NA ,NA, NA, NA, NA) ]
# Loop to evaluate last line of the test dataset
for (i in 1:nrow(test_data)) {
# Bind last row
fut <- rbind(train_data, test_data[i, ])
# Create indicators
fut[, c(paste0("EMA", "_", fast_EMA),
paste0("EMA", "_", slow_EMA)) := list(EMA(close, n = fast_EMA),
EMA(close, n = slow_EMA)) ]
fut$crossover[get(paste0("EMA", "_", fast_EMA), fut) > get(paste0("EMA", "_", slow_EMA), fut)] <- "faster_EMA_higher"
fut$crossover[get(paste0("EMA", "_", fast_EMA), fut) <= get(paste0("EMA", "_", slow_EMA), fut)] <- "faster_EMA_lower"
# Exit condition for takeprofit  - Fixed
tp <- tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1) + takeprofit * tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1)
if (length(tp) == 0) {
tp <- 0
}
# Ultimate stop loss
ult_sl <- tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1) - stoploss_ult * tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1)
if (length(ult_sl) == 0) {
ult_sl <- 0
}
# Trailing stop loss
# id_trail <- tail(fut$id[!is.na(fut$id)], 1)
#
# if (fut$action[nrow(fut)-1] %in% c("buy", "keep") & ( fut$close[nrow(fut)] > fut$close[nrow(fut)-1] )  ){
#
#   trail_sl <- fut$close[nrow(fut)] - stoploss_trail * fut$close[nrow(fut)]
#
#   if(trail_sl > max(fut$trail_sl[which(fut$id == id_trail)+1], na.rm =T)){
#     trail_sl <- fut$close[nrow(fut)] - stoploss_trail * fut$close[nrow(fut)]
#
#   }else{
#
#     trail_sl <- max(fut$trail_sl[which(fut$id == id_trail)+1])
#   }
#
#
#
# } else if (fut$action[nrow(fut)-1] %in% c("buy", "keep") & ( fut$close[nrow(fut)] <= fut$close[nrow(fut)-1]) ){
#
#   trail_sl <- max(fut$trail_sl[which(fut$id == id_trail)])
#
# } else {
#
#   trail_sl <-0
# }
#
# if(length(trail_sl) == 0 ){
#
#   trail_sl <- 0
# }
# Trailing stop loss
if (fut$action[nrow(fut)-1] %in% c("buy", "keep") & ( fut$close[nrow(fut)] > fut$close[nrow(fut)-1] )  ){
trail_sl <- fut$close[nrow(fut)] - stoploss_trail * fut$close[nrow(fut)]
if( trail_sl < tail(fut$trail_sl[!is.na(fut$trail_sl)], 1)){
trail_sl <- tail(fut$trail_sl[!is.na(fut$trail_sl)], 1)
}else {
trail_sl <- fut$close[nrow(fut)] - stoploss_trail * fut$close[nrow(fut)]
}
} else if (fut$action[nrow(fut)-1] %in% c("buy", "keep") & ( fut$close[nrow(fut)] <= fut$close[nrow(fut)-1] ) ){
trail_sl <- tail(fut$trail_sl[!is.na(fut$trail_sl)], 1)
} else {
trail_sl <-0
}
if(length(trail_sl) == 0 ){
trail_sl <- 0
}
fut$tp[nrow(fut)] <- tp
fut$ult_sl[nrow(fut)] <- ult_sl
fut$trail_sl[nrow(fut)] <- trail_sl
fut$exit_condition[nrow(fut)] <- fut$trail_sl[nrow(fut)] > fut$close[nrow(fut)] | fut$ult_sl[nrow(fut)] > fut$close[nrow(fut)] | fut$tp[nrow(fut)] < fut$close[nrow(fut)]
# BUY Condition
if ((is.na(fut$action[nrow(fut) - 1]) |  fut$action[nrow(fut) - 1] %in% c("sell", "no action"))
& fut$crossover[nrow(fut)] == "faster_EMA_higher") {
fut$action[nrow(fut)] <- "buy"
fut$Units[nrow(fut)] <- initial_budget / fut$close[nrow(fut)]
fut$Price[nrow(fut)] <- fut$Units[nrow(fut)]*fut$close[nrow(fut)]
fut$id[nrow(fut)] <- round(runif(1, 10000, 5000000))
# Keep Condition
} else if (fut$action[nrow(fut) - 1] %in% c("buy", "keep") &
fut$exit_condition[nrow(fut)] == FALSE ) {
fut$action[nrow(fut)] <- "keep"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1 ]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
# Sell Condition
} else if (fut$action[nrow(fut) - 1] %in% c("keep", "buy") &
fut$exit_condition[nrow(fut)] == TRUE) {
fut$action[nrow(fut)] <- "sell"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1]
fut$Price[nrow(fut)] <- fut$close[nrow(fut)]* fut$Units[nrow(fut)]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
initial_budget <- fut$Price[nrow(fut)]
# No Action Condition
} else if ( fut$action[nrow(fut) - 1] %in% c("sell", "no action") | (is.na(fut$action[nrow(fut) - 1])
& fut$crossover[nrow(fut)] == "faster_EMA_lower")) {
fut$action[nrow(fut)] <- "no action"
}
train_data <- fut
}
return(train_data)
}
cross_EMA_stoploss_trail_simple <- function(slow_EMA,takeprofit, stoploss_trail,stoploss_ult) {
# Train and test datasets$
train_data[, c("EMA",
"exit_value","exit_condition",
"crossover",
"crossover_Volume",
"action",
"tp",
"ult_sl",
"trail_sl",
"Units",
"Price",
"id") := list(NA,NA,NA,NA, NA, NA, NA, NA, NA, NA, NA, NA) ]
test_data[, c("EMA",
"exit_value",
"exit_condition",
"crossover",
"crossover_Volume",
"action",
"tp",
"ult_sl",
"trail_sl",
"Units",
"Price",
"id") := list(NA, NA,NA,NA,NA, NA, NA, NA ,NA, NA, NA, NA) ]
# Loop to evaluate last line of the test dataset
for (i in 1:nrow(test_data)) {
# Bind last row
fut <- rbind(train_data, test_data[i, ])
# Create indicators
fut$EMA <- EMA(fut$close, n = slow_EMA)
fut$crossover[nrow(fut)] <- ifelse(fut$close[nrow(fut)] > fut$EMA[nrow(fut)]  ,
"price_higher", "price_lower")
# Exit condition for takeprofit  - Fixed
tp <- tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1) + takeprofit * tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1)
if (length(tp) == 0) {
tp <- 0
}
# Ultimate stop loss
ult_sl <- tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1) - stoploss_ult * tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1)
if (length(ult_sl) == 0) {
ult_sl <- 0
}
# Trailing stop loss
if (fut$action[nrow(fut)-1] %in% c("buy", "keep") & ( fut$close[nrow(fut)] > fut$close[nrow(fut)-1] )  ){
trail_sl <- fut$close[nrow(fut)] - stoploss_trail * fut$close[nrow(fut)]
if( trail_sl < tail(fut$trail_sl[!is.na(fut$trail_sl)], 1)){
trail_sl <- tail(fut$trail_sl[!is.na(fut$trail_sl)], 1)
}else {
trail_sl <- fut$close[nrow(fut)] - stoploss_trail * fut$close[nrow(fut)]
}
} else if (fut$action[nrow(fut)-1] %in% c("buy", "keep") & ( fut$close[nrow(fut)] <= fut$close[nrow(fut)-1] ) ){
trail_sl <- tail(fut$trail_sl[!is.na(fut$trail_sl)], 1)
} else {
trail_sl <-0
}
if(length(trail_sl) == 0 ){
trail_sl <- 0
}
fut$tp[nrow(fut)] <- tp
fut$ult_sl[nrow(fut)] <- ult_sl
fut$trail_sl[nrow(fut)] <- trail_sl
fut$exit_condition[nrow(fut)] <- fut$trail_sl[nrow(fut)] > fut$close[nrow(fut)] | fut$ult_sl[nrow(fut)] > fut$close[nrow(fut)] | fut$tp[nrow(fut)] < fut$close[nrow(fut)]
# BUY Condition
if ((is.na(fut$action[nrow(fut) - 1]) |  fut$action[nrow(fut) - 1] %in% c("sell", "no action"))
& fut$crossover[nrow(fut)] == "price_higher") {
fut$action[nrow(fut)] <- "buy"
fut$Units[nrow(fut)] <- initial_budget / fut$close[nrow(fut)]
fut$Price[nrow(fut)] <- fut$Units[nrow(fut)]*fut$close[nrow(fut)]
fut$id[nrow(fut)] <- round(runif(1, 10000, 5000000))
# Keep Condition
} else if (fut$action[nrow(fut) - 1] %in% c("buy", "keep") &
fut$exit_condition[nrow(fut)] == FALSE ) {
fut$action[nrow(fut)] <- "keep"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1 ]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
# Sell Condition
} else if (fut$action[nrow(fut) - 1] %in% c("keep", "buy") &
fut$exit_condition[nrow(fut)] == TRUE) {
fut$action[nrow(fut)] <- "sell"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1]
fut$Price[nrow(fut)] <- fut$close[nrow(fut)]* fut$Units[nrow(fut)]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
initial_budget <- fut$Price[nrow(fut)]
# No Action Condition
} else  {
fut$action[nrow(fut)] <- "no action"
}
train_data <- fut
}
return(train_data)
}
portfolio_rsi_reversal <- function(ATR_period, RSI_period, roll_max_period, roll_min_period ,takeprofit, stoploss_trail,stoploss_ult) {
# Train and test datasets
train_data[, c("ATR",
"RSI",
"Roll_Max",
"Roll_Min",
"M_minus",
"Signal",
"exit_condition",
"action",
"Units",
"Price",
"tp",
"ult_sl",
"trail_sl",
"id") := list(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA) ]
test_data[, c("ATR",
"RSI",
"Roll_Max",
"Roll_Min",
"M_minus",
"Signal",
"exit_condition",
"action",
"Units",
"Price",
"tp",
"ult_sl",
"trail_sl",
"id") := list(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA) ]
# Going intro the loop for test data -----------------------------------------
for (i in 1:nrow(test_data)){
fut <- rbind(train_data, test_data[i, ])
# Technical indicators -----------------------------------------------------
fut$ATR <- ATR(fut[,c("High","Low","Close")], n = ATR_period)[,2]
fut$RSI <- RSI(fut$Close, n = RSI_period)
fut$Roll_Max <- runMax(fut$Close, n = roll_max_period, cumulative = FALSE)
fut$Roll_Min <- runMin(fut$Close, n = roll_min_period, cumulative = FALSE)
fut$M_minus <- (fut$Close - fut$Roll_Min)/fut$ATR
fut$Signal <- ifelse(fut$M_minus <= 2 & fut$RSI > 30, "long", "nothing")
# Exit condition for takeprofit  - Fixed
tp <- tail(fut$Close[fut$action == "buy"][!is.na(fut$Close[fut$action == "buy"])], 1) + takeprofit * tail(fut$Close[fut$action == "buy"][!is.na(fut$Close[fut$action == "buy"])], 1)
if (length(tp) == 0) {
tp <- 0
}
# Ultimate stop loss
ult_sl <- tail(fut$Close[fut$action == "buy"][!is.na(fut$Close[fut$action == "buy"])], 1) - stoploss_ult * tail(fut$Close[fut$action == "buy"][!is.na(fut$Close[fut$action == "buy"])], 1)
if (length(ult_sl) == 0) {
ult_sl <- 0
}
# Trailing stop loss
# browser()
if (fut$action[nrow(fut)-1] %in% c("buy", "keep") & ( fut$Close[nrow(fut)] > fut$Close[nrow(fut)-1] )  ){
trail_sl <- fut$Close[nrow(fut)] - stoploss_trail * fut$Close[nrow(fut)]
if( trail_sl < tail(fut$trail_sl[!is.na(fut$trail_sl)], 1)){
trail_sl <- tail(fut$trail_sl[!is.na(fut$trail_sl)], 1)
}else {
trail_sl <- fut$Close[nrow(fut)] - stoploss_trail * fut$Close[nrow(fut)]
}
} else if (fut$action[nrow(fut)-1] %in% c("buy", "keep") & ( fut$Close[nrow(fut)] <= fut$Close[nrow(fut)-1] ) ){
trail_sl <- tail(fut$trail_sl[!is.na(fut$trail_sl)], 1)
} else {
trail_sl <-0
}
if(length(trail_sl) == 0 ){
trail_sl <- 0
}
# browser()
fut$tp[nrow(fut)] <- tp
fut$ult_sl[nrow(fut)] <- ult_sl
fut$trail_sl[nrow(fut)] <- trail_sl
fut$exit_condition[nrow(fut)] <- fut$trail_sl[nrow(fut)] > fut$Close[nrow(fut)] | fut$ult_sl[nrow(fut)] > fut$Close[nrow(fut)] | fut$tp[nrow(fut)] < fut$Close[nrow(fut)]
# Deciding upon action -----------------------------------------------------
# Buy condition
if ( (is.na(fut$action[nrow(fut) - 1]) |  fut$action[nrow(fut) - 1] %in% c("sell", "no action")) &
fut$Signal[nrow(fut)] == "long") {
fut$action[nrow(fut)] <- "buy"
fut$Units[nrow(fut)] <- initial_budget / fut$Close[nrow(fut)]
fut$Price[nrow(fut)] <- fut$Units[nrow(fut)] * fut$Close[nrow(fut)]
fut$id[nrow(fut)] <- round(runif(1, 10000, 5000000))
# Sell condition
} else if (fut$action[nrow(fut) - 1] %in% c("keep", "buy") &
(fut$exit_condition[nrow(fut)] == TRUE  | fut$RSI[nrow(fut)] > 70 | fut$RSI[nrow(fut)] < 15)   ) {
fut$action[nrow(fut)] <- "sell"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1]
fut$Price[nrow(fut)] <- fut$Close[nrow(fut)]* fut$Units[nrow(fut)]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
initial_budget <- fut$Price[nrow(fut)]
# Keep condition
} else if ( fut$action[nrow(fut) - 1] %in% c("buy", "keep")   &
fut$exit_condition[nrow(fut)] == FALSE  ) {
fut$action[nrow(fut)] <- "keep"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1 ]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
} else {
fut$action[nrow(fut)] <- "no action"
}
train_data <- fut
print(i)
}
return(train_data)
}
plot_df <- tail(fut, 200)
df_points_buy <- data.frame(x = na.omit(plot_df$x[plot_df$action =="buy"]),
y = na.omit(plot_df$close[plot_df$action =="buy"]))
df_points_sell <- data.frame(x = na.omit(plot_df$x[plot_df$action =="sell"]),
y = na.omit(plot_df$close[plot_df$action == "sell"]))
par(mfrow = c(1, 1))
plot_df$close
plot(plot_df$close, type ="l", main = paste0("profits = ", tail(na.omit(plot_df$Price), 1)))
fut[, c(paste0("EMA", "_", fast_EMA)
fut[, c(paste0("EMA", "_", fast_EMA))
fut[, c(paste0("EMA", "_", fast_EMA))
fut[, c(paste0("EMA", "_", fast_EMA)]
fut[, c(paste0("EMA", "_", fast_EMA)]
fut
get(paste0("EMA", "_", fast_EMA), fut)
get(paste0("EMA", "_", fast_EMA), plot_df)
lines(get(paste0("EMA", "_", slow_EMA), plot_df), col ="grey")
lines(get(paste0("EMA", "_", fast_EMA), plot_df) , col ="blue")
points(rownames(plot_df)[plot_df$x %in% df_points_buy$x], df_points_buy$y, col ="green", pch = 19)
points(rownames(plot_df)[plot_df$x %in% df_points_sell$x], df_points_sell$y, col ="red", pch = 19)
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
myresult <- cross_EMA_stoploss(fast_EMA=50,
slow_EMA=20,
takeprofit = 0.05,
stoploss_trail = 0.05,
stoploss_ult = 0.05,
plot.it = T)
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
myresult <- cross_EMA_stoploss(fast_EMA=50,
slow_EMA=20,
takeprofit = 0.05,
stoploss_trail = 0.05,
stoploss_ult = 0.05,
plot.it = T)
# Train and test datasets$
train_data[, c(paste0("EMA", "_", fast_EMA),
paste0("EMA", "_", slow_EMA),
"exit_value","exit_condition",
"crossover",
"crossover_Volume",
"action",
"Units",
"Price",
"tp",
"ult_sl",
"trail_sl",
"id") := list(NA, NA, NA,NA,NA,NA, NA, NA, NA, NA, NA, NA, NA) ]
test_data[, c(paste0("EMA", "_", fast_EMA),
paste0("EMA", "_", slow_EMA),
"exit_value",
"exit_condition",
"crossover",
"crossover_Volume",
"action",
"Units",
"Price",
"tp",
"ult_sl",
"trail_sl",
"id") := list(NA, NA, NA,NA,NA,NA, NA, NA, NA ,NA, NA, NA, NA) ]
# Bind last row
fut <- rbind(train_data, test_data[i, ])
# Create indicators
fut[, c(paste0("EMA", "_", fast_EMA),
paste0("EMA", "_", slow_EMA)) := list(EMA(close, n = fast_EMA),
EMA(close, n = slow_EMA)) ]
fut$crossover[get(paste0("EMA", "_", fast_EMA), fut) > get(paste0("EMA", "_", slow_EMA), fut)] <- "faster_EMA_higher"
fut$crossover[get(paste0("EMA", "_", fast_EMA), fut) <= get(paste0("EMA", "_", slow_EMA), fut)] <- "faster_EMA_lower"
plot_df <- tail(fut, 200)
df_points_buy <- data.frame(x = na.omit(plot_df$x[plot_df$action =="buy"]),
y = na.omit(plot_df$close[plot_df$action =="buy"]))
df_points_sell <- data.frame(x = na.omit(plot_df$x[plot_df$action =="sell"]),
y = na.omit(plot_df$close[plot_df$action == "sell"]))
par(mfrow = c(1, 1))
plot(plot_df$close, type ="l", main = paste0("profits = ", tail(na.omit(plot_df$Price), 1)))
lines(get(paste0("EMA", "_", fast_EMA), plot_df) , col ="blue")
lines(get(paste0("EMA", "_", slow_EMA), plot_df), col ="grey")
points(rownames(plot_df)[plot_df$x %in% df_points_buy$x], df_points_buy$y, col ="green", pch = 19)
points(rownames(plot_df)[plot_df$x %in% df_points_sell$x], df_points_sell$y, col ="red", pch = 19)
train_data <- fut
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
myresult <- cross_EMA_stoploss(fast_EMA=50,
slow_EMA=20,
takeprofit = 0.05,
stoploss_trail = 0.05,
stoploss_ult = 0.05,
plot.it = T)
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
myresult <- cross_EMA_stoploss(fast_EMA=50,
slow_EMA=20,
takeprofit = 0.05,
stoploss_trail = 0.05,
stoploss_ult = 0.05,
plot.it = T)
myresult <- cross_EMA_stoploss(fast_EMA=50,
slow_EMA=200,
takeprofit = 0.05,
stoploss_trail = 0.05,
stoploss_ult = 0.05,
plot.it = T)
rm(list = ls())
source(paste("/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1", "10 Utils.R", sep = "/"))
setDTthreads(1)
# API info
api_info <- read.table(paste("/media/chris/DATA/Documents/Bot_Trading", "API_Keys.txt", sep = "/"), sep = ";", header = T)
API_Key <- as.character(api_info$API_Key)
API_Sign <- as.character(api_info$API_Sign)
# Choose pair
pair <- "BTCEUR"
# Path to save results0
data_path <- "/media/chris/DATA/Documents/Bot_Trading/Historical_data"
# Create pair directory
dir.create(paste(data_path, pair, sep ="/"), showWarnings = FALSE)
# Fix path
pair_data_results <- paste(data_path, pair, sep ="/")
# Loading Data for operations --------------------------------------------------
options(digits = 5)
# Csv file saved with historical trades
file <- paste0(paste(pair_data_results, pair, sep = "/"), ".csv")
# Read it
frame <- fread(file)
# # Fix
frame[, Date_POSIXct := anytime(as.numeric(as.character(V3)))]
frame[, Time := strftime(Date_POSIXct, format = "%H:%M:%S")]
colnames(frame) <- c("price", "volume", "epoch_time", "buy_sell", "market_limit",
"miscellaneous", "last_id", "Date_POSIXct", "Time")
frame[, Date := as.Date(Date_POSIXct)]
frame[, Hour := substr(frame$Time, 1,5)]
frame[, miscellaneous := NULL]
frame1 <- unique(frame)
# frame1 <- subset(frame1, frame1$Date >= "2019-12-01" & frame1$Date <= "2020-06-01")
frame1 <- subset(frame1, frame1$Date >= "2019-01-01")
frame1[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '1 hours') , format = '%H:%M:%S')]
# Create candle stick dataset
candles <- frame1[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
# candles <- merge(candles, volumes_ratio, by = c("Date", "interval"))
dim(candles)
p1 <- ggplot(data= candles, aes(x=1:nrow(candles), y=close)) +
geom_line(alpha = 0.5);p1
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 20)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- cross_EMA_stoploss(fast_EMA=65,
slow_EMA=130,
takeprofit = 0.05,
stoploss_trail = 0.05,
stoploss_ult = 0.05,
plot.it = F)
calculate_profits(myresult)
myresult <- cross_EMA_stoploss(fast_EMA=65,
slow_EMA=130,
takeprofit = 1,
stoploss_trail = 1,
stoploss_ult = 1,
plot.it = F)
calculate_profits(myresult)
candles
bollinger_bands(periods=20, times_sd=2, data=train_data){
bollinger_bands(periods=20, times_sd=2, data=train_data)
bollinger_bands(periods=nrow(data), times_sd=2, data=train_data)
bollinger_bands(periods=2000, times_sd=2, data=train_data)
periods=20
times_sd=2
data=train_data
df <- data
df
test_data
bollinger_bands(periods=20, times_sd=2, data=test_data)
bollinger_bands(periods=100, times_sd=2, data=test_data)
bollinger_bands(periods=250, times_sd=2, data=test_data)
bollinger_bands(periods=250, times_sd=1, data=test_data)
bollinger_bands(periods=250, times_sd=2, data=test_data)
bollinger_bands(periods=20, times_sd=2, data=test_data)
