# Badget
initial_budget <- 200
# select period of data
candles_recent <- as.data.table(klines[[1]])
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 10)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
sd_bb <- 2
takeprofit <- 0.05
stoploss_ult <- 0.05
plot.it <- F
# Train and test datasets
train_data[, c("up", "dn", "mavg","x",
"exit_condition",
"tp",
"ult_sl",
"action",
"Units",
"Price",
"id") := list(NA, NA,NA, NA, NA, NA, NA,
NA, NA, NA, NA) ]
test_data[, c("up", "dn", "mavg","x",
"exit_condition",
"tp",
"ult_sl",
"action",
"Units",
"Price",
"id") := list(NA, NA,NA, NA, NA, NA, NA,
NA, NA, NA, NA)]
i <-1
fut <- rbind(train_data, test_data[i, ])
fut$x <- 1:nrow(fut)
bands <- BBands(fut[, c("high", "low", "close")], sd = sd_bb)
fut$up <- bands[, 3]
fut$dn <- bands[, 1]
fut$mavg <- bands[, 2]
if(plot.it == TRUE){
plot_df <- tail(fut, 200)
# sr <- SR_lines(fut, roll = 100, Ns = nrow(fut), n_sort = 15, pair = pair,plot.it = F)
# fut <- tail(fut, 250)
df_points_buy <- data.frame(x = na.omit(plot_df$x[plot_df$action =="buy"]),
y = na.omit(plot_df$close[plot_df$action =="buy"]))
df_points_sell <- data.frame(x = na.omit(plot_df$x[plot_df$action =="sell"]),
y = na.omit(plot_df$close[plot_df$action == "sell"]))
par(mfrow = c(1, 1))
plot(plot_df$close, type ="l", main = paste0("profits = ", tail(na.omit(plot_df$Price), 1)))
lines(plot_df$up, col ="red")
lines(plot_df$dn, col ="red")
points(rownames(plot_df)[plot_df$x %in% df_points_buy$x], df_points_buy$y, col ="green", pch = 19)
points(rownames(plot_df)[plot_df$x %in% df_points_sell$x], df_points_sell$y, col ="red", pch = 19)
}
# Exit condition for takeprofit  - Fixed
tp <- tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1) + takeprofit * tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1)
if (length(tp) == 0) {
tp <- 0
}
# Ultimate stop loss
ult_sl <- tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1) - stoploss_ult * tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1)
if (length(ult_sl) == 0) {
ult_sl <- 0
}
fut$tp[nrow(fut)] <- tp
fut$ult_sl[nrow(fut)] <- ult_sl
fut$exit_condition[nrow(fut)] <-  fut$ult_sl[nrow(fut)] > fut$close[nrow(fut)] | fut$tp[nrow(fut)] < fut$close[nrow(fut)]
fut$action[nrow(fut)] <- "buy"
fut$Units[nrow(fut)] <- initial_budget / fut$close[nrow(fut)]
fut$Units[nrow(fut)]
fut$Price[nrow(fut)] <- fut$Units[nrow(fut)] * fut$close[nrow(fut)] - (0.0026 * fut$Units[nrow(fut)] * fut$close[nrow(fut)])
fut$Price[nrow(fut)]
# fut$Price[nrow(fut)] <- fut$Units[nrow(fut)] * fut$close[nrow(fut)]
fut$id[nrow(fut)] <- round(runif(1, 10000, 5000000))
train_data <- fut
train_data
# print(i)
if(plot.it == TRUE){
Sys.sleep(0.1)
# flush.console()
}
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 200
# select period of data
candles_recent <- as.data.table(klines[[1]])
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 10)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
sd_bb <- 2
takeprofit <- 0.05
stoploss_ult <- 0.05
plot.it <- F
# Train and test datasets
train_data[, c("up", "dn", "mavg","x",
"exit_condition",
"tp",
"ult_sl",
"action",
"Units",
"Price",
"id") := list(NA, NA,NA, NA, NA, NA, NA,
NA, NA, NA, NA) ]
test_data[, c("up", "dn", "mavg","x",
"exit_condition",
"tp",
"ult_sl",
"action",
"Units",
"Price",
"id") := list(NA, NA,NA, NA, NA, NA, NA,
NA, NA, NA, NA)]
# Going intro the loop for test data -----------------------------------------
for (i in 1:nrow(test_data)){
fut <- rbind(train_data, test_data[i, ])
fut$x <- 1:nrow(fut)
bands <- BBands(fut[, c("high", "low", "close")], sd = sd_bb)
fut$up <- bands[, 3]
fut$dn <- bands[, 1]
fut$mavg <- bands[, 2]
if(plot.it == TRUE){
plot_df <- tail(fut, 200)
# sr <- SR_lines(fut, roll = 100, Ns = nrow(fut), n_sort = 15, pair = pair,plot.it = F)
# fut <- tail(fut, 250)
df_points_buy <- data.frame(x = na.omit(plot_df$x[plot_df$action =="buy"]),
y = na.omit(plot_df$close[plot_df$action =="buy"]))
df_points_sell <- data.frame(x = na.omit(plot_df$x[plot_df$action =="sell"]),
y = na.omit(plot_df$close[plot_df$action == "sell"]))
par(mfrow = c(1, 1))
plot(plot_df$close, type ="l", main = paste0("profits = ", tail(na.omit(plot_df$Price), 1)))
lines(plot_df$up, col ="red")
lines(plot_df$dn, col ="red")
points(rownames(plot_df)[plot_df$x %in% df_points_buy$x], df_points_buy$y, col ="green", pch = 19)
points(rownames(plot_df)[plot_df$x %in% df_points_sell$x], df_points_sell$y, col ="red", pch = 19)
}
# Exit condition for takeprofit  - Fixed
tp <- tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1) + takeprofit * tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1)
if (length(tp) == 0) {
tp <- 0
}
# Ultimate stop loss
ult_sl <- tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1) - stoploss_ult * tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1)
if (length(ult_sl) == 0) {
ult_sl <- 0
}
fut$tp[nrow(fut)] <- tp
fut$ult_sl[nrow(fut)] <- ult_sl
fut$exit_condition[nrow(fut)] <-  fut$ult_sl[nrow(fut)] > fut$close[nrow(fut)] | fut$tp[nrow(fut)] < fut$close[nrow(fut)]
# Deciding upon action -----------------------------------------------------
# Buy condition
if ( (is.na(fut$action[nrow(fut) - 1]) |  fut$action[nrow(fut) - 1] %in% c("sell", "no action")) &
(fut$close[nrow(fut)] > fut$up[nrow(fut)] )) {
fut$action[nrow(fut)] <- "buy"
fut$Units[nrow(fut)] <- initial_budget / fut$close[nrow(fut)]
fut$Price[nrow(fut)] <- fut$Units[nrow(fut)] * fut$close[nrow(fut)] - (0.0026 * fut$Units[nrow(fut)] * fut$close[nrow(fut)])
# fut$Price[nrow(fut)] <- fut$Units[nrow(fut)] * fut$close[nrow(fut)]
fut$id[nrow(fut)] <- round(runif(1, 10000, 5000000))
# Sell condition
} else if (fut$action[nrow(fut) - 1] %in% c("keep", "buy") & (
fut$exit_condition[nrow(fut)] == TRUE  )) {
fut$action[nrow(fut)] <- "sell"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1]
fut$Price[nrow(fut)] <- fut$close[nrow(fut)]* fut$Units[nrow(fut)]  - (0.0026 * fut$Units[nrow(fut)] * fut$close[nrow(fut)])
# fut$Price[nrow(fut)] <- fut$close[nrow(fut)]* fut$Units[nrow(fut)]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
initial_budget <- fut$Price[nrow(fut)]
# Keep condition
} else if ( fut$action[nrow(fut) - 1] %in% c("buy", "keep")   &
(fut$exit_condition[nrow(fut)] == FALSE )) {
fut$action[nrow(fut)] <- "keep"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1 ]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
} else {
fut$action[nrow(fut)] <- "no action"
}
train_data <- fut
# print(i)
if(plot.it == TRUE){
Sys.sleep(0.1)
# flush.console()
}
print(i)
}
train_data
train_data$Price
View(train_data)
# Or choose a single one
ticks <- c(60)
units <- c(rep("minutes", 1))
intervals <- paste(ticks, units, sep = " ")
# Load trades and conver to OHLC, applies filtering
klines <- trades_to_OHLC(pair = pair,
interval = intervals,
from_date = "2018-01-01",
to_date = "2020-10-02",
date_subset = T)
names(klines) <- gsub(" ", "_", intervals)
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 200
# select period of data
candles_recent <- as.data.table(klines[[1]])
candles_recent
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 10)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
sd_bb <- 2
takeprofit <- 0.05
stoploss_ult <- 0.05
plot.it <- F
# Train and test datasets
train_data[, c("up", "dn", "mavg","x",
"exit_condition",
"tp",
"ult_sl",
"action",
"Units",
"Price",
"id") := list(NA, NA,NA, NA, NA, NA, NA,
NA, NA, NA, NA) ]
test_data[, c("up", "dn", "mavg","x",
"exit_condition",
"tp",
"ult_sl",
"action",
"Units",
"Price",
"id") := list(NA, NA,NA, NA, NA, NA, NA,
NA, NA, NA, NA)]
# Going intro the loop for test data -----------------------------------------
for (i in 1:nrow(test_data)){
fut <- rbind(train_data, test_data[i, ])
fut$x <- 1:nrow(fut)
bands <- BBands(fut[, c("high", "low", "close")], sd = sd_bb)
fut$up <- bands[, 3]
fut$dn <- bands[, 1]
fut$mavg <- bands[, 2]
if(plot.it == TRUE){
plot_df <- tail(fut, 200)
# sr <- SR_lines(fut, roll = 100, Ns = nrow(fut), n_sort = 15, pair = pair,plot.it = F)
# fut <- tail(fut, 250)
df_points_buy <- data.frame(x = na.omit(plot_df$x[plot_df$action =="buy"]),
y = na.omit(plot_df$close[plot_df$action =="buy"]))
df_points_sell <- data.frame(x = na.omit(plot_df$x[plot_df$action =="sell"]),
y = na.omit(plot_df$close[plot_df$action == "sell"]))
par(mfrow = c(1, 1))
plot(plot_df$close, type ="l", main = paste0("profits = ", tail(na.omit(plot_df$Price), 1)))
lines(plot_df$up, col ="red")
lines(plot_df$dn, col ="red")
points(rownames(plot_df)[plot_df$x %in% df_points_buy$x], df_points_buy$y, col ="green", pch = 19)
points(rownames(plot_df)[plot_df$x %in% df_points_sell$x], df_points_sell$y, col ="red", pch = 19)
}
# Exit condition for takeprofit  - Fixed
tp <- tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1) + takeprofit * tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1)
if (length(tp) == 0) {
tp <- 0
}
# Ultimate stop loss
ult_sl <- tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1) - stoploss_ult * tail(fut$close[fut$action == "buy"][!is.na(fut$close[fut$action == "buy"])], 1)
if (length(ult_sl) == 0) {
ult_sl <- 0
}
fut$tp[nrow(fut)] <- tp
fut$ult_sl[nrow(fut)] <- ult_sl
fut$exit_condition[nrow(fut)] <-  fut$ult_sl[nrow(fut)] > fut$close[nrow(fut)] | fut$tp[nrow(fut)] < fut$close[nrow(fut)]
# Deciding upon action -----------------------------------------------------
# Buy condition
if ( (is.na(fut$action[nrow(fut) - 1]) |  fut$action[nrow(fut) - 1] %in% c("sell", "no action")) &
(fut$close[nrow(fut)] > fut$up[nrow(fut)] )) {
fut$action[nrow(fut)] <- "buy"
fut$Units[nrow(fut)] <- initial_budget / fut$close[nrow(fut)]
fut$Price[nrow(fut)] <- fut$Units[nrow(fut)] * fut$close[nrow(fut)] - (0.0026 * fut$Units[nrow(fut)] * fut$close[nrow(fut)])
# fut$Price[nrow(fut)] <- fut$Units[nrow(fut)] * fut$close[nrow(fut)]
fut$id[nrow(fut)] <- round(runif(1, 10000, 5000000))
# Sell condition
} else if (fut$action[nrow(fut) - 1] %in% c("keep", "buy") & (
fut$exit_condition[nrow(fut)] == TRUE  )) {
fut$action[nrow(fut)] <- "sell"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1]
fut$Price[nrow(fut)] <- fut$close[nrow(fut)]* fut$Units[nrow(fut)]  - (0.0026 * fut$Units[nrow(fut)] * fut$close[nrow(fut)])
# fut$Price[nrow(fut)] <- fut$close[nrow(fut)]* fut$Units[nrow(fut)]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
initial_budget <- fut$Price[nrow(fut)]
# Keep condition
} else if ( fut$action[nrow(fut) - 1] %in% c("buy", "keep")   &
(fut$exit_condition[nrow(fut)] == FALSE )) {
fut$action[nrow(fut)] <- "keep"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1 ]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
} else {
fut$action[nrow(fut)] <- "no action"
}
train_data <- fut
# print(i)
if(plot.it == TRUE){
Sys.sleep(0.1)
# flush.console()
}
print(i)
}
View(train_data)
0.01*4000
0.0026*1000
0.00005*32000
32060*0.02
1000*0.02
# Preamble ---------------------------------------------------------------------
# screen -S pullingBTC R
.rs.restartR()
### retire this git, go to binance
## Take best funtionalities from here move to binance
# Source functions
path_source <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Source"
files.sources = list.files(path_source, full.names = T)
rm(list = ls())
### retire this git, go to binance
## Take best funtionalities from here move to binance
# Source functions
path_source <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Source"
files.sources = list.files(path_source, full.names = T)
sapply(files.sources, source)
# Choose which unix time to use for pulling data
# Choose from ["start_of_time", "manually", "latest_available"]
unix_time <- "start_of_time"
# Choose any pair to pull
# pair <- "XETHZEUR"
pair <- "BTCEUR"
# pair <- "ALGOEUR"
# pair <- "KAVAEUR"
# pair <- "GNOEUR"
# pair <- "ADAEUR"
# pair <- "STORJEUR"
# Path to save results
data_path <- "/media/chris/DATA/Documents/Bot_Trading/Historical_data"
# Create pair directory
dir.create(paste(data_path, pair, sep ="/"), showWarnings = FALSE)
# Fix path
pair_data_results <- paste(data_path, pair, sep ="/")
60
# Or choose a single one
ticks <- c(5)
units <- c(rep("minutes", 1))
intervals <- paste(ticks, units, sep = " ")
# Load trades and conver to OHLC, applies filtering
klines <- trades_to_OHLC(pair = pair,
interval = intervals,
from_date = "2020-08-01",
to_date = "2020-10-02",
date_subset = T)
names(klines) <- gsub(" ", "_", intervals)
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 200
# select period of data
candles_recent <- as.data.table(klines[[1]])
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
test_data
# Or choose a single one
ticks <- c(5)
units <- c(rep("minutes", 1))
intervals <- paste(ticks, units, sep = " ")
# Load trades and conver to OHLC, applies filtering
klines <- trades_to_OHLC(pair = pair,
interval = intervals,
from_date = "2020-08-01",
to_date = "2020-09-02",
date_subset = T)
names(klines) <- gsub(" ", "_", intervals)
klines
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 200
# select period of data
candles_recent <- as.data.table(klines[[1]])
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- cross_EMA_stoploss_trail_simple(slow_SMA= 100,takeprofit=0.02, stoploss_trail=1000,stoploss_ult=0.01)
calculate_profits(myresult)
library(foreach)
library(doParallel)
# # Badget
paraller_exec <-TRUE
initial_budget <- 200
# testing parameters
slow_SMA <- data.frame(slow_SMA = seq(50, 200, 25), flag = 1)
tp <- data.frame(tp = c(0.005, 0.01, 0.02, 0.03), flag = 1)
sl <- data.frame(sl = c(0.005, 0.01,  0.02, 0.03), flag = 1)
testing_params <- left_join(slow_SMA, tp)%>%  left_join(sl)
testing_params
# testing_params <- subset(testing_params, testing_params$spar_slow > testing_params$spar_fast)
testing_params$flag <- NULL
testing_params <- as.data.table(testing_params)
testing_params
library(foreach)
library(doParallel)
# # Badget
paraller_exec <-TRUE
initial_budget <- 200
# testing parameters
slow_SMA <- data.frame(slow_SMA = seq(50, 200, 25), flag = 1)
tp <- data.frame(tp = c(0.005, 0.01, 0.02, 0.03), flag = 1)
sl <- data.frame(sl = c(0.005, 0.01,  0.02, 0.03), flag = 1)
testing_params <- left_join(slow_SMA, tp)%>%  left_join(sl)
# testing_params <- subset(testing_params, testing_params$spar_slow > testing_params$spar_fast)
testing_params$flag <- NULL
testing_params <- as.data.table(testing_params)
# testing_params <- testing_params[1:25,]
all_results <- list()
start_time <- Sys.time()
library(foreach)
library(doParallel)
# # Badget
paraller_exec <-TRUE
initial_budget <- 200
# testing parameters
slow_SMA <- data.frame(slow_SMA = seq(50, 200, 25), flag = 1)
tp <- data.frame(tp = c(0.005, 0.01, 0.02, 0.03), flag = 1)
sl <- data.frame(sl = c(0.005, 0.01,  0.02, 0.03), flag = 1)
testing_params <- left_join(slow_SMA, tp)%>%  left_join(sl)
# testing_params <- subset(testing_params, testing_params$spar_slow > testing_params$spar_fast)
testing_params$flag <- NULL
testing_params <- as.data.table(testing_params)
# testing_params <- testing_params[1:25,]
all_results <- list()
start_time <- Sys.time()
for (j in 1:length(klines)){
# out_of_sample <- subset(klines[[i]], klines[[i]]$Date >= "2020-08-01")
# select period of data
candles_recent <- klines[[j]]
# Intitial data frame
train_n <- ceiling(nrow(candles_recent) / 10)
train_data <- candles_recent[1:train_n, ]
# Test, same
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
# cl <- parallel::makeForkCluster(2)
# doParallel::registerDoParallel(cl)
start_time <- Sys.time()
results <- foreach(i = 1:nrow(testing_params) , .combine = 'rbind') %do% {
myresult <- cross_EMA_stoploss_trail_simple(slow_SMA = testing_params$slow_SMA[i],
takeprofit = testing_params$tp[i],
stoploss_ult = testing_params$sl[i],
stoploss_trail=1000)
params <- paste(slow_SMA = testing_params$slow_SMA[i],
takeprofit = testing_params$tp[i],
stoploss_ult = testing_params$sl[i],
stoploss_trail=1000,
sep ="_")
res <- calculate_profits(myresult, params = params)
gc()
res
}
end_time <- Sys.time()
end_time - start_time
# parallel::stopCluster(cl)
all_results[[j]] <- results
}
# Or choose a single one
ticks <- c(15)
units <- c(rep("minutes", 1))
intervals <- paste(ticks, units, sep = " ")
# Load trades and conver to OHLC, applies filtering
klines <- trades_to_OHLC(pair = pair,
interval = intervals,
from_date = "2020-08-01",
to_date = "2020-09-02",
date_subset = T)
names(klines) <- gsub(" ", "_", intervals)
klines
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 200
# select period of data
candles_recent <- as.data.table(klines[[1]])
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- cross_EMA_stoploss_trail_simple(slow_SMA= 100,takeprofit=0.02, stoploss_trail=1000,stoploss_ult=0.01)
calculate_profits(myresult)
myresult <- cross_EMA_stoploss_trail_simple(slow_SMA= 250,takeprofit=0.01, stoploss_trail=0.02,stoploss_ult=0.01)
calculate_profits(myresult)
myresult <- cross_EMA_stoploss_trail_simple(slow_SMA= 75,takeprofit=0.01, stoploss_trail=0.02,stoploss_ult=0.01)
calculate_profits(myresult)
myresult <- cross_EMA_stoploss_trail_simple(slow_SMA= 30,takeprofit=0.01, stoploss_trail=0.02,stoploss_ult=0.01)
calculate_profits(myresult)
myresult <- cross_EMA_stoploss_trail_simple(slow_SMA= 100,takeprofit=0.01, stoploss_trail=0.02,stoploss_ult=0.01)
calculate_profits(myresult)
myresult <- cross_EMA_stoploss_trail_simple(slow_SMA= 200,takeprofit=0.01, stoploss_trail=0.02,stoploss_ult=0.01)
myresult <- cross_EMA_stoploss_trail_simple(slow_SMA= 180,takeprofit=0.01, stoploss_trail=0.02,stoploss_ult=0.01)
