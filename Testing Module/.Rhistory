doParallel::registerDoParallel(cl)
start_time <- Sys.time()
results <- foreach(i = 1:nrow(testing_params), .combine = 'rbind') %dopar% {
myresult <- RSI_splines(RSI_Period = testing_params$RSI_Period[i],
RSI_lower = testing_params$RSI_lower[i],
RSI_upper = testing_params$RSI_upper[i],
spar = testing_params$spar[i],
stoploss_ult = testing_params$stoploss_ult[i],
plot.it = FALSE)
# Close last position
if(myresult$action[nrow(myresult)] == "keep") {
myresult$action[nrow(myresult)] <- "sell"
myresult$Price[nrow(myresult)] <- myresult$close[nrow(myresult)] * myresult$Units[nrow(myresult)]
}
params <- paste(RSI_Period = testing_params$RSI_Period[i],
RSI_lower = testing_params$RSI_lower[i],
RSI_upper = testing_params$RSI_upper[i],
spar = testing_params$spar[i],
stoploss_ult = testing_params$stoploss_ult[i],
sep ="_")
res <- calculate_profits(myresult, params = params)
gc()
res
}
end_time <- Sys.time()
end_time - start_time
parallel::stopCluster(cl)
all_results[[i]] <- results
}
paraller_exec
rm(list = ls())
# Source functions
path_source <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Source"
files.sources = list.files(path_source, full.names = T)
sapply(files.sources, source)
# Choose which unix time to use for pulling data
# Choose from ["start_of_time", "manually", "latest_available"]
unix_time <- "latest_available"
# Choose any pair to pull
pair <- "BTCEUR"
# pair <- "XETHZEUR"
# pair <- "LSKEUR"
# pair <- "GNOEUR"
# pair <- "DASHEUR"
# pair <- "XLMEUR"
# Path to save results
data_path <- "/media/chris/DATA/Documents/Bot_Trading/Historical_data"
# Create pair directory
dir.create(paste(data_path, pair, sep ="/"), showWarnings = FALSE)
# Fix path
pair_data_results <- paste(data_path, pair, sep ="/")
# Or choose a single one
ticks <- c(12)
units <- c(rep("hours", 1))
intervals <- paste(ticks, units, sep = " ")
# Load trades and conver to OHLC, applies filtering
klines <- trades_to_OHLC(pair = pair,
interval = intervals,
from_date = "2020-01-01",
date_subset = T)
names(klines) <- gsub(" ", "_", intervals)
klines
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 200
# select period of data
candles_recent <- as.data.table(klines[[1]])
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 5)
train_n
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- splines_fast_slow_cross(spar_slow = 0.8,
spar_fast = 0.5,
takeprofit = 0.05,
stoploss_ult = 1000,
plot.it = F)
myresult
calculate_profits(myresult)
# myresult <- splines_fast_slow(spar_fast=0.5, spar_slow= 0.9, plot.it = T)
myresult <- splines_fast_slow_cross(spar_slow = 0.4,
spar_fast = 0.1,
takeprofit = 0.05,
stoploss_ult = 1000,
plot.it = F)
calculate_profits(myresult)
myresult$x <- 1:nrow(myresult)
segment_buy <- myresult[action %in%c("buy"), ]
segment_sell <- myresult[action %in%c("sell"), ]
p1 <- ggplot(data= myresult, aes(x=x, y=close)) +
geom_line(alpha = 0.5) +
#geom_line(aes(x = x, y = spline_fast), color ="red")+
#geom_line(aes(x = x, y = spline_slow), color ="green")+
geom_point(data = segment_buy, aes(x=x, y=close),
color ="green", size = 1) +
geom_point(data = segment_sell, aes(x=x, y=close),
color ="red", size = 1);p1
df_red <- myresult[0:2500,]
# myresult <- splines_fast_slow(spar_fast=0.5, spar_slow= 0.9, plot.it = T)
myresult <- splines_fast_slow_cross(spar_slow = 0.8,
spar_fast = 0.6,
takeprofit = 0.05,
stoploss_ult = 1000,
plot.it = F)
calculate_profits(myresult)
myresult$x <- 1:nrow(myresult)
segment_buy <- myresult[action %in%c("buy"), ]
segment_sell <- myresult[action %in%c("sell"), ]
p1 <- ggplot(data= myresult, aes(x=x, y=close)) +
geom_line(alpha = 0.5) +
#geom_line(aes(x = x, y = spline_fast), color ="red")+
#geom_line(aes(x = x, y = spline_slow), color ="green")+
geom_point(data = segment_buy, aes(x=x, y=close),
color ="green", size = 1) +
geom_point(data = segment_sell, aes(x=x, y=close),
color ="red", size = 1);p1
library(foreach)
library(doParallel)
# # Badget
paraller_exec <-TRUE
initial_budget <- 200
# testing parameters
spar_fast <- data.frame(spar_fast = seq(0.1, 0.9, 0.1), flag = 1)
spar_slow <- data.frame(spar_slow = seq(0.1, 1, 0.1), flag = 1)
tp <- data.frame(tp = c(0.01, 0.02, 0.03, 1000), flag = 1)
sl <- data.frame(sl = c(0.01, 0.02,  0.03, 1000), flag = 1)
testing_params <- left_join(spar_fast, spar_slow) %>% left_join(tp)%>% left_join(sl)
testing_params
testing_params <- subset(testing_params, testing_params$spar_slow > testing_params$spar_fast)
testing_params$flag <- NULL
testing_params <- as.data.table(testing_params)
# testing_params <- testing_params[1:25,]
all_results <- list()
start_time <- Sys.time()
for (i in 1:length(klines)){
# out_of_sample <- subset(klines[[i]], klines[[i]]$Date >= "2020-08-01")
# select period of data
candles_recent <- klines[[i]]
# Intitial data frame
train_n <- ceiling(nrow(candles_recent) / 4)
train_data <- candles_recent[1:train_n, ]
# Test, same
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
cl <- parallel::makeForkCluster(2)
doParallel::registerDoParallel(cl)
start_time <- Sys.time()
results <- foreach(i = 1:nrow(testing_params),.verbose =T , .combine = 'rbind') %dopar% {
myresult <- splines_fast_slow_cross(takeprofit = testing_params$tp[i],
stoploss_ult = testing_params$sl[i],
spar_fast = testing_params$spar_fast[i],
spar_slow = testing_params$spar_slow[i],
plot.it = FALSE)
params <- paste(spar_fast = testing_params$spar_fast[i],
spar_slow = testing_params$spar_slow[i],
takeprofit = testing_params$tp[i],
stoploss_ult = testing_params$sl[i],
sep ="_")
res <- calculate_profits(myresult, params = params)
gc()
res
}
end_time <- Sys.time()
end_time - start_time
parallel::stopCluster(cl)
all_results[[i]] <- results
}
end_time <- Sys.time()
print(end_time - start_time)
filelist <- mapply(cbind, all_results, "Interval" = names(klines), SIMPLIFY = F)
final <- do.call(rbind, filelist)
final$pair <- pair
View(final)
testing_params
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 200
# select period of data
candles_recent <- as.data.table(klines[[1]])
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 5)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
# myresult <- splines_fast_slow(spar_fast=0.5, spar_slow= 0.9, plot.it = T)
myresult <- splines_fast_slow_cross(spar_slow = 0.1,
spar_fast = 0.6,
takeprofit = 1000,
stoploss_ult = 0.02,
plot.it = T)
# myresult <- splines_fast_slow(spar_fast=0.5, spar_slow= 0.9, plot.it = T)
myresult <- splines_fast_slow_cross(spar_slow = 0.6,
spar_fast = 0.1,
takeprofit = 1000,
stoploss_ult = 0.02,
plot.it = T)
View(myresult)
calculate_profits(myresult)
# myresult <- splines_fast_slow(spar_fast=0.5, spar_slow= 0.9, plot.it = T)
myresult <- splines_fast_slow_cross(spar_slow = 1,
spar_fast = 0.7,
takeprofit = 1000,
stoploss_ult = 1000,
plot.it = T)
calculate_profits(myresult)
myresult$x <- 1:nrow(myresult)
segment_buy <- myresult[action %in%c("buy"), ]
segment_sell <- myresult[action %in%c("sell"), ]
p1 <- ggplot(data= myresult, aes(x=x, y=close)) +
geom_line(alpha = 0.5) +
#geom_line(aes(x = x, y = spline_fast), color ="red")+
#geom_line(aes(x = x, y = spline_slow), color ="green")+
geom_point(data = segment_buy, aes(x=x, y=close),
color ="green", size = 1) +
geom_point(data = segment_sell, aes(x=x, y=close),
color ="red", size = 1);p1
# Or choose a single one
ticks <- c(12)
units <- c(rep("hours", 1))
intervals <- paste(ticks, units, sep = " ")
# Load trades and conver to OHLC, applies filtering
klines <- trades_to_OHLC(pair = pair,
interval = intervals,
from_date = "2019-01-01",
date_subset = T)
names(klines) <- gsub(" ", "_", intervals)
# Get a first visual
df <- klines[[1]]
fig <- df %>% plot_ly(x = ~full_date_time , type="candlestick",
open = ~open, close = ~close,
high = ~high, low = ~low)
fig <- fig %>% layout(title = pair,
xaxis = list(rangeslider = list(visible = F)))
fig
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 200
# select period of data
candles_recent <- as.data.table(klines[[1]])
candles_recent
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 5)
train_n
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
test_data
candles_recent
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 5)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
# myresult <- splines_fast_slow(spar_fast=0.5, spar_slow= 0.9, plot.it = T)
myresult <- splines_fast_slow_cross(spar_slow = 1,
spar_fast = 0.7,
takeprofit = 1000,
stoploss_ult = 1000,
plot.it = F)
calculate_profits(myresult)
myresult$x <- 1:nrow(myresult)
segment_buy <- myresult[action %in%c("buy"), ]
segment_sell <- myresult[action %in%c("sell"), ]
p1 <- ggplot(data= myresult, aes(x=x, y=close)) +
geom_line(alpha = 0.5) +
#geom_line(aes(x = x, y = spline_fast), color ="red")+
#geom_line(aes(x = x, y = spline_slow), color ="green")+
geom_point(data = segment_buy, aes(x=x, y=close),
color ="green", size = 1) +
geom_point(data = segment_sell, aes(x=x, y=close),
color ="red", size = 1);p1
rm(list = ls())
# Preamble ---------------------------------------------------------------------
# screen -S testing_params R
.rs.restartR()
rm(list = ls())
# Source functions
path_source <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Source"
files.sources = list.files(path_source, full.names = T)
sapply(files.sources, source)
# Choose which unix time to use for pulling data
# Choose from ["start_of_time", "manually", "latest_available"]
unix_time <- "latest_available"
# Choose any pair to pull
pair <- "BTCEUR"
# Choose any pair to pull
# pair <- "BTCEUR"
pair <- "XETHZEUR"
# pair <- "LSKEUR"
# pair <- "GNOEUR"
# pair <- "DASHEUR"
# pair <- "XLMEUR"
# Path to save results
data_path <- "/media/chris/DATA/Documents/Bot_Trading/Historical_data"
# Create pair directory
dir.create(paste(data_path, pair, sep ="/"), showWarnings = FALSE)
# Fix path
pair_data_results <- paste(data_path, pair, sep ="/")
# Or choose a single one
ticks <- c(12)
units <- c(rep("hours", 1))
intervals <- paste(ticks, units, sep = " ")
# Load trades and conver to OHLC, applies filtering
klines <- trades_to_OHLC(pair = pair,
interval = intervals,
from_date = "2019-01-01",
date_subset = T)
names(klines) <- gsub(" ", "_", intervals)
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 200
# select period of data
candles_recent <- as.data.table(klines[[1]])
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 5)
train_n
# myresult <- splines_fast_slow(spar_fast=0.5, spar_slow= 0.9, plot.it = T)
myresult <- splines_fast_slow_cross(spar_slow = 1,
spar_fast = 0.7,
takeprofit = 1000,
stoploss_ult = 1000,
plot.it = F)
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 200
# select period of data
candles_recent <- as.data.table(klines[[1]])
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 5)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
# myresult <- splines_fast_slow(spar_fast=0.5, spar_slow= 0.9, plot.it = T)
myresult <- splines_fast_slow_cross(spar_slow = 1,
spar_fast = 0.7,
takeprofit = 1000,
stoploss_ult = 1000,
plot.it = F)
calculate_profits(myresult)
myresult$x <- 1:nrow(myresult)
segment_buy <- myresult[action %in%c("buy"), ]
segment_sell <- myresult[action %in%c("sell"), ]
p1 <- ggplot(data= myresult, aes(x=x, y=close)) +
geom_line(alpha = 0.5) +
#geom_line(aes(x = x, y = spline_fast), color ="red")+
#geom_line(aes(x = x, y = spline_slow), color ="green")+
geom_point(data = segment_buy, aes(x=x, y=close),
color ="green", size = 1) +
geom_point(data = segment_sell, aes(x=x, y=close),
color ="red", size = 1);p1
library(foreach)
library(doParallel)
# # Badget
paraller_exec <-TRUE
initial_budget <- 200
# testing parameters
spar_fast <- data.frame(spar_fast = seq(0.1, 0.9, 0.1), flag = 1)
spar_slow <- data.frame(spar_slow = seq(0.1, 1, 0.1), flag = 1)
tp <- data.frame(tp = c(0.01, 0.02, 0.03, 1000), flag = 1)
sl <- data.frame(sl = c(0.01, 0.02,  0.03, 1000), flag = 1)
testing_params <- left_join(spar_fast, spar_slow) %>% left_join(tp)%>% left_join(sl)
testing_params <- subset(testing_params, testing_params$spar_slow > testing_params$spar_fast)
testing_params$flag <- NULL
testing_params <- as.data.table(testing_params)
# testing_params <- testing_params[1:25,]
all_results <- list()
start_time <- Sys.time()
# testing_params <- testing_params[1:25,]
all_results <- list()
start_time <- Sys.time()
for (i in 1:length(klines)){
# out_of_sample <- subset(klines[[i]], klines[[i]]$Date >= "2020-08-01")
# select period of data
candles_recent <- klines[[i]]
# Intitial data frame
train_n <- ceiling(nrow(candles_recent) / 4)
train_data <- candles_recent[1:train_n, ]
# Test, same
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
cl <- parallel::makeForkCluster(3)
doParallel::registerDoParallel(cl)
start_time <- Sys.time()
results <- foreach(i = 1:nrow(testing_params),.verbose =T , .combine = 'rbind') %dopar% {
myresult <- splines_fast_slow_cross(takeprofit = testing_params$tp[i],
stoploss_ult = testing_params$sl[i],
spar_fast = testing_params$spar_fast[i],
spar_slow = testing_params$spar_slow[i],
plot.it = FALSE)
params <- paste(spar_fast = testing_params$spar_fast[i],
spar_slow = testing_params$spar_slow[i],
takeprofit = testing_params$tp[i],
stoploss_ult = testing_params$sl[i],
sep ="_")
res <- calculate_profits(myresult, params = params)
gc()
res
}
end_time <- Sys.time()
end_time - start_time
parallel::stopCluster(cl)
all_results[[i]] <- results
}
end_time <- Sys.time()
print(end_time - start_time)
rm(list = ls())
# Preamble ---------------------------------------------------------------------
# screen -S testing_params R
.rs.restartR()
# Source functions
path_source <- "/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/Source"
files.sources = list.files(path_source, full.names = T)
sapply(files.sources, source)
# Choose which unix time to use for pulling data
# Choose from ["start_of_time", "manually", "latest_available"]
unix_time <- "latest_available"
# Choose any pair to pull
# pair <- "BTCEUR"
pair <- "XETHZEUR"
# pair <- "LSKEUR"
# pair <- "GNOEUR"
# pair <- "DASHEUR"
# pair <- "XLMEUR"
# Path to save results
data_path <- "/media/chris/DATA/Documents/Bot_Trading/Historical_data"
# Create pair directory
dir.create(paste(data_path, pair, sep ="/"), showWarnings = FALSE)
# Fix path
pair_data_results <- paste(data_path, pair, sep ="/")
# Or choose a single one
ticks <- c(60)
units <- c(rep("minutes", 1))
# Or choose a single one
ticks <- c(60)
units <- c(rep("minutes", 1))
intervals <- paste(ticks, units, sep = " ")
# Load trades and conver to OHLC, applies filtering
klines <- trades_to_OHLC(pair = pair,
interval = intervals,
from_date = "2019-01-01",
date_subset = T)
names(klines) <- gsub(" ", "_", intervals)
klines
library(foreach)
library(doParallel)
# # Badget
paraller_exec <-TRUE
initial_budget <- 200
# testing parameters
spar_fast <- data.frame(spar_fast = seq(0.1, 0.9, 0.1), flag = 1)
spar_slow <- data.frame(spar_slow = seq(0.1, 1, 0.1), flag = 1)
tp <- data.frame(tp = c(0.01, 0.02, 0.03, 1000), flag = 1)
sl <- data.frame(sl = c(0.01, 0.02,  0.03, 1000), flag = 1)
testing_params <- left_join(spar_fast, spar_slow) %>% left_join(tp)%>% left_join(sl)
testing_params <- subset(testing_params, testing_params$spar_slow > testing_params$spar_fast)
testing_params$flag <- NULL
testing_params <- as.data.table(testing_params)
testing_params
# testing_params <- testing_params[1:25,]
all_results <- list()
start_time <- Sys.time()
for (i in 1:length(klines)){
# out_of_sample <- subset(klines[[i]], klines[[i]]$Date >= "2020-08-01")
# select period of data
candles_recent <- klines[[i]]
# Intitial data frame
train_n <- ceiling(nrow(candles_recent) / 4)
train_data <- candles_recent[1:train_n, ]
# Test, same
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
cl <- parallel::makeForkCluster(3)
doParallel::registerDoParallel(cl)
start_time <- Sys.time()
results <- foreach(i = 1:nrow(testing_params),.verbose =T , .combine = 'rbind') %dopar% {
myresult <- splines_fast_slow_cross(takeprofit = testing_params$tp[i],
stoploss_ult = testing_params$sl[i],
spar_fast = testing_params$spar_fast[i],
spar_slow = testing_params$spar_slow[i],
plot.it = FALSE)
params <- paste(spar_fast = testing_params$spar_fast[i],
spar_slow = testing_params$spar_slow[i],
takeprofit = testing_params$tp[i],
stoploss_ult = testing_params$sl[i],
sep ="_")
res <- calculate_profits(myresult, params = params)
gc()
res
}
end_time <- Sys.time()
end_time - start_time
parallel::stopCluster(cl)
all_results[[i]] <- results
}
end_time <- Sys.time()
print(end_time - start_time)
filelist <- mapply(cbind, all_results, "Interval" = names(klines), SIMPLIFY = F)
final <- do.call(rbind, filelist)
final$pair <- pair
parallel::stopCluster(cl)
parallel::stopCluster(cl)
parallel::stopCluster(cl)
