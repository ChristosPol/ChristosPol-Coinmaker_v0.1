frame <- fread(file)
# # Fix
frame[, Date_POSIXct := anytime(as.numeric(as.character(V3)))]
rm(list = ls())
source(paste("/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1", "10 Utils.R", sep = "/"))
setDTthreads(1)
# Pulling historical data ------------------------------------------------------
# API info
api_info <- read.table(paste("/media/chris/DATA/Documents/Bot_Trading", "API_Keys.txt", sep = "/"), sep = ";", header = T)
API_Key <- as.character(api_info$API_Key)
API_Sign <- as.character(api_info$API_Sign)
# Choose pair
pair <- "BTCEUR"
# Path to save results0
data_path <- "/media/chris/DATA/Documents/Bot_Trading/Historical_data"
# Create pair directory
dir.create(paste(data_path, pair, sep ="/"), showWarnings = FALSE)
# Fix path
pair_data_results <- paste(data_path, pair, sep ="/")
# Loading Data for operations --------------------------------------------------
options(digits = 5)
# Csv file saved with historical trades
file <- paste0(paste(pair_data_results, pair, sep = "/"), ".csv")
# Read it
frame <- fread(file)
# # Fix
frame[, Date_POSIXct := anytime(as.numeric(as.character(V3)))]
frame[, Time := strftime(Date_POSIXct, format = "%H:%M:%S")]
colnames(frame) <- c("price", "volume", "epoch_time", "buy_sell", "market_limit",
"miscellaneous", "last_id", "Date_POSIXct", "Time")
frame[, Date := as.Date(Date_POSIXct)]
frame[, Hour := substr(frame$Time, 1,5)]
frame[, miscellaneous := NULL]
frame1 <- unique(frame)
frame1 <- subset(frame1, frame1$Date >= "2019-07-01")
# Select interval
frame1[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '15 minutes') , format = '%H:%M:%S')]
frame1
# Create candle stick dataset
candles <- frame1[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
dim(candles)
# Loading Data for operations --------------------------------------------------
options(digits = 5)
# Csv file saved with historical trades
file <- paste0(paste(pair_data_results, pair, sep = "/"), ".csv")
# Read it
frame <- fread(file)
# # Fix
frame[, Date_POSIXct := anytime(as.numeric(as.character(V3)))]
frame[, Time := strftime(Date_POSIXct, format = "%H:%M:%S")]
colnames(frame) <- c("price", "volume", "epoch_time", "buy_sell", "market_limit",
"miscellaneous", "last_id", "Date_POSIXct", "Time")
frame[, Date := as.Date(Date_POSIXct)]
frame[, Hour := substr(frame$Time, 1,5)]
frame[, miscellaneous := NULL]
frame1 <- unique(frame)
frame1 <- subset(frame1, frame1$Date >= "2019-07-20")
# Select interval
frame1[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '15 minutes') , format = '%H:%M:%S')]
# Create candle stick dataset
candles <- frame1[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
dim(candles)
frame1
candles
# Loading Data for operations --------------------------------------------------
options(digits = 5)
# Csv file saved with historical trades
file <- paste0(paste(pair_data_results, pair, sep = "/"), ".csv")
# Read it
frame <- fread(file)
# # Fix
frame[, Date_POSIXct := anytime(as.numeric(as.character(V3)))]
frame[, Time := strftime(Date_POSIXct, format = "%H:%M:%S")]
colnames(frame) <- c("price", "volume", "epoch_time", "buy_sell", "market_limit",
"miscellaneous", "last_id", "Date_POSIXct", "Time")
frame[, Date := as.Date(Date_POSIXct)]
frame[, Hour := substr(frame$Time, 1,5)]
frame[, miscellaneous := NULL]
frame1 <- unique(frame)
frame1 <- subset(frame1, frame1$Date >= "2020-07-20")
# Select interval
frame1[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '15 minutes') , format = '%H:%M:%S')]
# Create candle stick dataset
candles <- frame1[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
dim(candles)
# Loading Data for operations --------------------------------------------------
options(digits = 5)
# Csv file saved with historical trades
file <- paste0(paste(pair_data_results, pair, sep = "/"), ".csv")
# Read it
frame <- fread(file)
# # Fix
frame[, Date_POSIXct := anytime(as.numeric(as.character(V3)))]
frame[, Time := strftime(Date_POSIXct, format = "%H:%M:%S")]
colnames(frame) <- c("price", "volume", "epoch_time", "buy_sell", "market_limit",
"miscellaneous", "last_id", "Date_POSIXct", "Time")
frame[, Date := as.Date(Date_POSIXct)]
frame[, Hour := substr(frame$Time, 1,5)]
frame[, miscellaneous := NULL]
frame1 <- unique(frame)
frame1 <- subset(frame1, frame1$Date >= "2020-06-20")
# Select interval
frame1[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '15 minutes') , format = '%H:%M:%S')]
# Create candle stick dataset
candles <- frame1[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
dim(candles)
# Best cross EMA so far
# 40_110_200_0.03_0.05
# 675.91
# 102
# 2020-01-10	2020-06-19	40_110_200_0.03_0.05
# # Badget
initial_budget <- 500
# # select period of data
candles_recent <- candles
# # Plot if like
# plot_candlesticks(dta = candles_recent, Ns = nrow(candles_recent), asset = pair)
# plot_candlesticks(dta = candles_recent, Ns = 100, asset = pair)
#
# # N Training Data
train_n <- ceiling(nrow(candles_recent) / 17)
train_data <- candles_recent[1:train_n, ]
train_data
#
# # Test, same
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
test_data
library(foreach)
# testing parameters
roll <- data.frame(roll = c(20, 50, 100, 150, 200), flag = 1)
n_sort <- data.frame(n_sort = c(3, 6, 10, 20), flag = 1)
takeprofit <- data.frame(takeprofit = c(0.05, 0.08, 0.1), flag = 1)
stoploss_trail <- data.frame(stoploss_trail = c(0.01, 0.02), flag = 1)
stoploss_ult <- data.frame(stoploss_ult = c(0.01, 0.02), flag = 1)
#
testing_params <- left_join(roll, n_sort) %>%
left_join(takeprofit)%>% left_join(stoploss_trail)%>% left_join(stoploss_ult)
testing_params$flag <- NULL
testing_params
library("doParallel")
library("foreach")
cl <- parallel::makeForkCluster(2)
doParallel::registerDoParallel(cl)
start_time <- Sys.time()
results <- foreach(i = 1:nrow(testing_params), .combine = 'rbind') %dopar% {
myresult <- Dynamic_SR_Lines(roll = testing_params$roll[i],
n_sort = testing_params$n_sort[i],
takeprofit = testing_params$takeprofit[i],
stoploss_trail = testing_params$stoploss_trail[i],
stoploss_ult = testing_params$stoploss_ult[i])
# er <- tryCatch(
#    {
res <- calculate_profits(myresult)
res$params <- paste(roll = testing_params$roll[i],
n_sort = testing_params$n_sort[i],
takeprofit = testing_params$takeprofit[i],
stoploss_trail = testing_params$stoploss_trail[i],
stoploss_ult = testing_params$stoploss_ult[i],
sep ="_")
#
gc()
# error = function(e){})
# if(length(er) == 0){
# res <- data.frame(profit = 0, n_trades = 0, params = "0", enter_date = as.Date("2020-04-07"), exit_date =as.Date("2020-04-07"))
res
}
end_time <- Sys.time()
end_time - start_time
parallel::stopCluster(cl)
# Best cross EMA so far
# 40_110_200_0.03_0.05
# 675.91
# 102
# 2020-01-10	2020-06-19	40_110_200_0.03_0.05
# # Badget
initial_budget <- 500
# # select period of data
candles_recent <- candles
# colnames(candles_recent) <- c("Date", "interval", "High", "Low", "Open", "Close", "Volume"  )
# # Plot if like
# plot_candlesticks(dta = candles_recent, Ns = nrow(candles_recent), asset = pair)
# plot_candlesticks(dta = candles_recent, Ns = 100, asset = pair)
#
# # N Training Data
train_n <- ceiling(nrow(candles_recent) / 17)
train_data <- candles_recent[1:train_n, ]
#
# # Test, same
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
library(foreach)
# testing parameters
roll <- data.frame(roll = c(20, 50, 100, 150, 200), flag = 1)
n_sort <- data.frame(n_sort = c(3, 6, 10, 20), flag = 1)
takeprofit <- data.frame(takeprofit = c(0.05, 0.08, 0.1), flag = 1)
stoploss_trail <- data.frame(stoploss_trail = c(0.01, 0.02), flag = 1)
stoploss_ult <- data.frame(stoploss_ult = c(0.01, 0.02), flag = 1)
#
testing_params <- left_join(roll, n_sort) %>%
left_join(takeprofit)%>% left_join(stoploss_trail)%>% left_join(stoploss_ult)
testing_params$flag <- NULL
getDTthreads()
initial_budget <- 500
# # select period of data
candles_recent <- candles
# colnames(candles_recent) <- c("Date", "interval", "High", "Low", "Open", "Close", "Volume"  )
# # Plot if like
# plot_candlesticks(dta = candles_recent, Ns = nrow(candles_recent), asset = pair)
# plot_candlesticks(dta = candles_recent, Ns = 100, asset = pair)
#
# # N Training Data
train_n <- ceiling(nrow(candles_recent) / 17)
train_data <- candles_recent[1:train_n, ]
#
# # Test, same
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
library(foreach)
# testing parameters
roll <- data.frame(roll = c(20, 50, 100, 150, 200), flag = 1)
n_sort <- data.frame(n_sort = c(3, 6, 10, 20), flag = 1)
takeprofit <- data.frame(takeprofit = c(0.05, 0.08, 0.1), flag = 1)
stoploss_trail <- data.frame(stoploss_trail = c(0.01, 0.02), flag = 1)
stoploss_ult <- data.frame(stoploss_ult = c(0.01, 0.02), flag = 1)
#
testing_params <- left_join(roll, n_sort) %>%
left_join(takeprofit)%>% left_join(stoploss_trail)%>% left_join(stoploss_ult)
testing_params$flag <- NULL
library("doParallel")
library("foreach")
cl <- parallel::makeForkCluster(3)
doParallel::registerDoParallel(cl)
start_time <- Sys.time()
results <- foreach(i = 1:nrow(testing_params), .combine = 'rbind') %dopar% {
myresult <- Dynamic_SR_Lines(roll = testing_params$roll[i],
n_sort = testing_params$n_sort[i],
takeprofit = testing_params$takeprofit[i],
stoploss_trail = testing_params$stoploss_trail[i],
stoploss_ult = testing_params$stoploss_ult[i])
# er <- tryCatch(
#    {
res <- calculate_profits(myresult)
res$params <- paste(roll = testing_params$roll[i],
n_sort = testing_params$n_sort[i],
takeprofit = testing_params$takeprofit[i],
stoploss_trail = testing_params$stoploss_trail[i],
stoploss_ult = testing_params$stoploss_ult[i],
sep ="_")
#
gc()
# error = function(e){})
# if(length(er) == 0){
# res <- data.frame(profit = 0, n_trades = 0, params = "0", enter_date = as.Date("2020-04-07"), exit_date =as.Date("2020-04-07"))
res
}
end_time <- Sys.time()
end_time - start_time
parallel::stopCluster(cl)
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 8)
train_data <- candles_recent[1:train_n, ]
# Test, same
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
takeprofit <-0.1
stoploss_trail <-0.02
stoploss_ult <-0.02
i <-1
myresult <- Dynamic_SR_Lines(roll=100, n_sort=10, takeprofit=0.03, stoploss_trail=0.02,stoploss_ult=0.02)
# Close last position
if(myresult$action[nrow(myresult)] == "keep") {
myresult$action[nrow(myresult)] <- "sell"
myresult$Price[nrow(myresult)] <- myresult$close[nrow(myresult)] * myresult$Units[nrow(myresult)]
}
# Calculate profits
calculate_profits(myresult)
# how many trades were succesful (to be functioned)
mah <- subset(myresult,myresult$action %in% c("buy","sell") )
profitable_trades <- list()
ids_s <- unique(mah$id)
for(i in 1:length(unique(mah$id))){
profitable_trades[[i]] <- mah$close[mah$id == ids_s[i] & mah$action =="sell"]-mah$close[mah$id == ids_s[i] & mah$action =="buy"]
}
table(unlist(profitable_trades) > 0)
# Plot each trade's indicators and price action (to be functioned)
mytest <- myresult
idents <- unique(mytest$id)[!is.na(unique(mytest$id))]
par(mfrow = c(1, 1))
i <- 1
for (i in 1:length(idents)){
h <- head(which(mytest$id == idents[i]),1) -200
if(h < 0){
h <- 1
}
t <- tail(which(mytest$id == idents[i]),1) + 200
mytest <- myresult[h:t, ]
ident <- idents[i]
plot(1:nrow(mytest), mytest$close, type = "l")
buyprice <- mytest$close[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$close[mytest$action =="buy" & mytest$id ==ident])]
sellprice <- mytest$close[mytest$action =="sell" & mytest$id ==ident][!is.na(mytest$close[mytest$action =="sell" & mytest$id ==ident])]
mtext(round((sellprice - buyprice)/buyprice, digits = 3), side = 3)
points(which(mytest$action =="buy" & mytest$id ==ident), mytest$close[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$close[mytest$action =="buy" & mytest$id ==ident])], pch =19, col ="green")
points(which(mytest$action =="sell"& mytest$id ==ident), mytest$close[mytest$action =="sell"& mytest$id ==ident][!is.na(mytest$close[mytest$action =="sell"& mytest$id ==ident])], pch =19, col ="red")
# plot(mytest$macd, col ="blue", type ="l")#, ylim = c(mn, mx))
# points(which(mytest$action =="buy" & mytest$id ==ident), mytest$macd[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$macd[mytest$action =="buy" & mytest$id ==ident])], pch =19, col ="blue")
# points(which(mytest$action =="sell"& mytest$id ==ident), mytest$macd[mytest$action =="sell"& mytest$id ==ident][!is.na(mytest$macd[mytest$action =="sell"& mytest$id ==ident])], pch =19, col ="black")
# abline(h = 0, lty ="dashed")
# plot(mytest$volume, type ="l")
# lines(mytest$EMA_volume, col ="red")
# points(which(mytest$action =="buy" & mytest$id ==ident), mytest$volume[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$volume[mytest$action =="buy" & mytest$id ==ident])], pch =19, col ="blue")
# points(which(mytest$action =="sell"& mytest$id ==ident), mytest$volume[mytest$action =="sell"& mytest$id ==ident][!is.na(mytest$volume[mytest$action =="sell"& mytest$id ==ident])], pch =19, col ="black")
abline(h = mytest$SL[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$SL[mytest$action =="buy" & mytest$id ==ident])], col ="green")
abline(h = mytest$RL[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$RL[mytest$action =="buy" & mytest$id ==ident])], col ="red")
mytest <- myresult
print(i)
}
# Loading Data for operations --------------------------------------------------
options(digits = 5)
# Csv file saved with historical trades
file <- paste0(paste(pair_data_results, pair, sep = "/"), ".csv")
# Read it
frame <- fread(file)
# # Fix
frame[, Date_POSIXct := anytime(as.numeric(as.character(V3)))]
frame[, Time := strftime(Date_POSIXct, format = "%H:%M:%S")]
colnames(frame) <- c("price", "volume", "epoch_time", "buy_sell", "market_limit",
"miscellaneous", "last_id", "Date_POSIXct", "Time")
frame[, Date := as.Date(Date_POSIXct)]
frame[, Hour := substr(frame$Time, 1,5)]
frame[, miscellaneous := NULL]
frame1 <- unique(frame)
frame1 <- subset(frame1, frame1$Date >= "2019-06-20")
rm(list = ls())
source(paste("/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1", "10 Utils.R", sep = "/"))
setDTthreads(1)
# Pulling historical data ------------------------------------------------------
# API info
api_info <- read.table(paste("/media/chris/DATA/Documents/Bot_Trading", "API_Keys.txt", sep = "/"), sep = ";", header = T)
API_Key <- as.character(api_info$API_Key)
API_Sign <- as.character(api_info$API_Sign)
# Choose pair
pair <- "BTCEUR"
# Path to save results0
data_path <- "/media/chris/DATA/Documents/Bot_Trading/Historical_data"
# Create pair directory
dir.create(paste(data_path, pair, sep ="/"), showWarnings = FALSE)
# Fix path
pair_data_results <- paste(data_path, pair, sep ="/")
# Loading Data for operations --------------------------------------------------
options(digits = 5)
# Csv file saved with historical trades
file <- paste0(paste(pair_data_results, pair, sep = "/"), ".csv")
# Read it
frame <- fread(file)
# # Fix
frame[, Date_POSIXct := anytime(as.numeric(as.character(V3)))]
frame[, Time := strftime(Date_POSIXct, format = "%H:%M:%S")]
colnames(frame) <- c("price", "volume", "epoch_time", "buy_sell", "market_limit",
"miscellaneous", "last_id", "Date_POSIXct", "Time")
frame[, Date := as.Date(Date_POSIXct)]
frame[, Hour := substr(frame$Time, 1,5)]
frame[, miscellaneous := NULL]
frame1 <- unique(frame)
frame1 <- subset(frame1, frame1$Date >= "2019-06-20")
# Select interval
frame1[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '5 minutes') , format = '%H:%M:%S')]
# Create candle stick dataset
candles <- frame1[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
dim(candles)
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 8)
train_data <- candles_recent[1:train_n, ]
# Test, same
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
takeprofit <-0.1
stoploss_trail <-0.02
stoploss_ult <-0.02
i <-1
par(mfrow=c(2,1))
myresult <- Dynamic_SR_Lines(roll=100, n_sort=10, takeprofit=0.03, stoploss_trail=0.02,stoploss_ult=0.02)
# Close last position
if(myresult$action[nrow(myresult)] == "keep") {
myresult$action[nrow(myresult)] <- "sell"
myresult$Price[nrow(myresult)] <- myresult$close[nrow(myresult)] * myresult$Units[nrow(myresult)]
}
# Calculate profits
calculate_profits(myresult)
# how many trades were succesful (to be functioned)
mah <- subset(myresult,myresult$action %in% c("buy","sell") )
profitable_trades <- list()
ids_s <- unique(mah$id)
for(i in 1:length(unique(mah$id))){
profitable_trades[[i]] <- mah$close[mah$id == ids_s[i] & mah$action =="sell"]-mah$close[mah$id == ids_s[i] & mah$action =="buy"]
}
table(unlist(profitable_trades) > 0)
# Plot each trade's indicators and price action (to be functioned)
mytest <- myresult
idents <- unique(mytest$id)[!is.na(unique(mytest$id))]
par(mfrow = c(1, 1))
i <- 1
for (i in 1:length(idents)){
h <- head(which(mytest$id == idents[i]),1) -200
if(h < 0){
h <- 1
}
t <- tail(which(mytest$id == idents[i]),1) + 200
mytest <- myresult[h:t, ]
ident <- idents[i]
plot(1:nrow(mytest), mytest$close, type = "l")
buyprice <- mytest$close[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$close[mytest$action =="buy" & mytest$id ==ident])]
sellprice <- mytest$close[mytest$action =="sell" & mytest$id ==ident][!is.na(mytest$close[mytest$action =="sell" & mytest$id ==ident])]
mtext(round((sellprice - buyprice)/buyprice, digits = 3), side = 3)
points(which(mytest$action =="buy" & mytest$id ==ident), mytest$close[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$close[mytest$action =="buy" & mytest$id ==ident])], pch =19, col ="green")
points(which(mytest$action =="sell"& mytest$id ==ident), mytest$close[mytest$action =="sell"& mytest$id ==ident][!is.na(mytest$close[mytest$action =="sell"& mytest$id ==ident])], pch =19, col ="red")
# plot(mytest$macd, col ="blue", type ="l")#, ylim = c(mn, mx))
# points(which(mytest$action =="buy" & mytest$id ==ident), mytest$macd[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$macd[mytest$action =="buy" & mytest$id ==ident])], pch =19, col ="blue")
# points(which(mytest$action =="sell"& mytest$id ==ident), mytest$macd[mytest$action =="sell"& mytest$id ==ident][!is.na(mytest$macd[mytest$action =="sell"& mytest$id ==ident])], pch =19, col ="black")
# abline(h = 0, lty ="dashed")
# plot(mytest$volume, type ="l")
# lines(mytest$EMA_volume, col ="red")
# points(which(mytest$action =="buy" & mytest$id ==ident), mytest$volume[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$volume[mytest$action =="buy" & mytest$id ==ident])], pch =19, col ="blue")
# points(which(mytest$action =="sell"& mytest$id ==ident), mytest$volume[mytest$action =="sell"& mytest$id ==ident][!is.na(mytest$volume[mytest$action =="sell"& mytest$id ==ident])], pch =19, col ="black")
abline(h = mytest$SL[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$SL[mytest$action =="buy" & mytest$id ==ident])], col ="green")
abline(h = mytest$RL[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$RL[mytest$action =="buy" & mytest$id ==ident])], col ="red")
mytest <- myresult
print(i)
}
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
source('/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1/10 Utils.R')
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 8)
train_data <- candles_recent[1:train_n, ]
# Test, same
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
takeprofit <-0.1
stoploss_trail <-0.02
stoploss_ult <-0.02
i <-1
par(mfrow=c(2,1))
myresult <- Dynamic_SR_Lines(roll=100, n_sort=10, takeprofit=0.03, stoploss_trail=0.02,stoploss_ult=0.02)
# Close last position
if(myresult$action[nrow(myresult)] == "keep") {
myresult$action[nrow(myresult)] <- "sell"
myresult$Price[nrow(myresult)] <- myresult$close[nrow(myresult)] * myresult$Units[nrow(myresult)]
}
# Calculate profits
calculate_profits(myresult)
# how many trades were succesful (to be functioned)
mah <- subset(myresult,myresult$action %in% c("buy","sell") )
profitable_trades <- list()
ids_s <- unique(mah$id)
for(i in 1:length(unique(mah$id))){
profitable_trades[[i]] <- mah$close[mah$id == ids_s[i] & mah$action =="sell"]-mah$close[mah$id == ids_s[i] & mah$action =="buy"]
}
table(unlist(profitable_trades) > 0)
# Plot each trade's indicators and price action (to be functioned)
mytest <- myresult
idents <- unique(mytest$id)[!is.na(unique(mytest$id))]
par(mfrow = c(1, 1))
i <- 1
for (i in 1:length(idents)){
h <- head(which(mytest$id == idents[i]),1) -200
if(h < 0){
h <- 1
}
t <- tail(which(mytest$id == idents[i]),1) + 200
mytest <- myresult[h:t, ]
ident <- idents[i]
plot(1:nrow(mytest), mytest$close, type = "l")
buyprice <- mytest$close[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$close[mytest$action =="buy" & mytest$id ==ident])]
sellprice <- mytest$close[mytest$action =="sell" & mytest$id ==ident][!is.na(mytest$close[mytest$action =="sell" & mytest$id ==ident])]
mtext(round((sellprice - buyprice)/buyprice, digits = 3), side = 3)
points(which(mytest$action =="buy" & mytest$id ==ident), mytest$close[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$close[mytest$action =="buy" & mytest$id ==ident])], pch =19, col ="green")
points(which(mytest$action =="sell"& mytest$id ==ident), mytest$close[mytest$action =="sell"& mytest$id ==ident][!is.na(mytest$close[mytest$action =="sell"& mytest$id ==ident])], pch =19, col ="red")
# plot(mytest$macd, col ="blue", type ="l")#, ylim = c(mn, mx))
# points(which(mytest$action =="buy" & mytest$id ==ident), mytest$macd[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$macd[mytest$action =="buy" & mytest$id ==ident])], pch =19, col ="blue")
# points(which(mytest$action =="sell"& mytest$id ==ident), mytest$macd[mytest$action =="sell"& mytest$id ==ident][!is.na(mytest$macd[mytest$action =="sell"& mytest$id ==ident])], pch =19, col ="black")
# abline(h = 0, lty ="dashed")
# plot(mytest$volume, type ="l")
# lines(mytest$EMA_volume, col ="red")
# points(which(mytest$action =="buy" & mytest$id ==ident), mytest$volume[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$volume[mytest$action =="buy" & mytest$id ==ident])], pch =19, col ="blue")
# points(which(mytest$action =="sell"& mytest$id ==ident), mytest$volume[mytest$action =="sell"& mytest$id ==ident][!is.na(mytest$volume[mytest$action =="sell"& mytest$id ==ident])], pch =19, col ="black")
abline(h = mytest$SL[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$SL[mytest$action =="buy" & mytest$id ==ident])], col ="green")
abline(h = mytest$RL[mytest$action =="buy" & mytest$id ==ident][!is.na(mytest$RL[mytest$action =="buy" & mytest$id ==ident])], col ="red")
mytest <- myresult
print(i)
}
View(myresult)
