"Price",
"id") := list(NA, NA, NA, NA, NA ,NA, NA, NA, NA) ]
# Loop to evaluate last line of the test dataset
for (i in 1:nrow(test_data)) {
# Bind last row
fut <- rbind(train_data, test_data[i, ])
# Create indicators
fut[, c(paste0("EMA", "_", fast_EMA),
paste0("EMA", "_", slow_EMA),
paste0("Volume_EMA", "_", Volume_EMA)) := list(EMA(close, n = fast_EMA),
EMA(close, n = slow_EMA),
EMA(volume, n = Volume_EMA)) ]
# Select a strategy (Only EMA_Crossover works)
if (method == "EMA_Crossover"){
fut$crossover[get(paste0("EMA", "_", fast_EMA), fut) < get(paste0("EMA", "_", slow_EMA), fut)] <- "faster_EMA_lower"
fut$crossover[get(paste0("EMA", "_", fast_EMA), fut) >= get(paste0("EMA", "_", slow_EMA), fut)] <- "faster_EMA_higher"
fut$crossover_Volume[get(paste0("Volume_EMA", "_", Volume_EMA), fut) < fut$volume] <- "volume_higher"
fut$crossover_Volume[get(paste0("Volume_EMA", "_", Volume_EMA), fut) >= fut$volume] <- "volume_lower"
} else if (method == "MACD_Crossover"){
fut$crossover[fut$macd > fut$signal] <- 1
} else {
print(paste0("Select one of the valid methods: ", paste(available_methods, collapse = ", " )))
}
# Buy Condition
if ((is.na(fut$action[nrow(fut) - 1]) |  fut$action[nrow(fut) - 1] %in% c("sell", "no action")) &
fut$crossover[nrow(fut)] =="faster_EMA_lower"  &
fut$crossover_Volume[nrow(fut)] == "volume_higher" ){
fut$action[nrow(fut)] <- "buy"
fut$Units[nrow(fut)] <- initial_budget / fut$close[nrow(fut)]
fut$Price[nrow(fut)] <- fut$Units[nrow(fut)]*fut$close[nrow(fut)]
fut$id[nrow(fut)] <- round(runif(1, 10000, 5000000))
# Keep Condition
} else if (fut$action[nrow(fut) - 1] %in% c("buy", "keep") &
(fut$crossover[nrow(fut)] == "faster_EMA_higher" &  fut$crossover_Volume[nrow(fut)] == "volume_lower" | fut$crossover[nrow(fut)] == "faster_EMA_lower" &  fut$crossover_Volume[nrow(fut)] == "volume_higher" |fut$crossover[nrow(fut)] == "faster_EMA_lower" &  fut$crossover_Volume[nrow(fut)] == "volume_lower" )  ) {
fut$action[nrow(fut)] <- "keep"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1 ]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
# Sell Condition
} else if (fut$action[nrow(fut) - 1] %in% c("keep", "buy") &  fut$crossover[nrow(fut)] == "faster_EMA_higher" & fut$crossover_Volume[nrow(fut)] == "volume_higher") {
fut$action[nrow(fut)] <- "sell"
fut$Units[nrow(fut)] <- fut$Units[nrow(fut) -1]
fut$Price[nrow(fut)] <- fut$close[nrow(fut)]* fut$Units[nrow(fut)]
fut$id[nrow(fut)] <- fut$id[nrow(fut)-1]
initial_budget <- fut$Price[nrow(fut)]
# No Action Condition
} else if ( fut$action[nrow(fut) - 1] %in% c("sell", "no action") | (is.na(fut$action[nrow(fut) - 1]) & fut$crossover[nrow(fut)] == "faster_EMA_lower" & fut$crossover_Volume[nrow(fut)] == "volume_lower")) {
fut$action[nrow(fut)] <- "no action"
}
train_data <- fut
}
return(train_data)
}
# Private API calls ------------------------------------------------------------
myfun <- function (url, key, secret)
{
nonce <- as.character(as.numeric(Sys.time()) * 1000000)
post_data <- paste0("nonce=", nonce)
method_path <- gsub("^.*?kraken.com", "", url)
sign <- hmac(key =  RCurl::base64Decode(secret, mode = "raw"),
object = c(charToRaw(method_path), digest(object = paste0(nonce, post_data),
algo = "sha256", serialize = FALSE,
raw = TRUE)), algo = "sha512", raw = TRUE)
httpheader <- c(`API-Key` = key, `API-Sign` =  RCurl::base64Encode(sign))
curl <- RCurl::getCurlHandle(useragent = paste("Rbitcoin", packageVersion("Rbitcoin")))
query_result_json <- rawToChar(RCurl::getURLContent(curl = curl,
url = url, binary = TRUE, postfields = post_data,
httpheader = httpheader))
query_result <- jsonlite::fromJSON(query_result_json)
return(query_result)
}
curl <- RCurl::getCurlHandle(useragent = paste("Coinmaker"))
curl
curl <- RCurl::getCurlHandle(useragent = paste("Rbitcoin", packageVersion("Rbitcoin")))
curl
paste("Rbitcoin", packageVersion("Rbitcoin")
paste("Rbitcoin", packageVersion("Rbitcoin") )
paste("Rbitcoin", packageVersion("Rbitcoin") )
rm(list = ls())
options(digits=20)
options(scipen=999)
source(paste("/media/chris/DATA/Documents/Bot_Trading/Coinmaker", "10 Utils.R", sep = "/"))
# API info
api_info <- read.table(paste("/media/chris/DATA/Documents/Bot_Trading", "API_Keys.txt", sep = "/"), sep = ";", header = T)
API_Key <- as.character(api_info$API_Key)
API_Sign <- as.character(api_info$API_Sign)
# Choose pair
pair <- "XETHZEUR"
# Path to save results
data_path <- "/media/chris/DATA/Documents/Bot_Trading/Historical_data"
# Create pair directory
dir.create(paste(data_path, pair, sep ="/"), showWarnings = FALSE)
# Fix path
pair_data_results <- paste(data_path, pair, sep ="/")
pair_data_results
# Loading Data for operations --------------------------------------------------
options(digits = 5)
# Csv file saved with historical trades
file <- paste0(paste(pair_data_results, pair, sep = "/"), ".csv")
# Read it
frame <- fread(file)
# # Fix
frame[, Date_POSIXct := anytime(as.numeric(as.character(V3)))]
frame[, Time := strftime(Date_POSIXct, format = "%H:%M:%S")]
colnames(frame) <- c("price", "volume", "epoch_time", "buy_sell", "market_limit",
"miscellaneous", "last_id", "Date_POSIXct", "Time")
frame[, Date := as.Date(Date_POSIXct)]
frame[, Hour := substr(frame$Time, 1,5)]
frame[, miscellaneous := NULL]
frame[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '15 minutes') , format = '%H:%M:%S')]
frame1 <- unique(frame)
frame1 <- subset(frame1, frame1$Date >= "2019-01-01")
# Create candle stick dataset
candles <- copy(frame1)
candles <- candles[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
rm(list = ls())
options(digits=20)
options(scipen=999)
source(paste("/media/chris/DATA/Documents/Bot_Trading", "10 Utils.R", sep = "/"))
source(paste("/media/chris/DATA/Documents/Bot_Trading/Coinmaker", "10 Utils.R", sep = "/"))
# ------------------------------------------------------------------------------
# Choose pair
pair <- "XETHZEUR"
# Path to save results
data_path <- "/media/chris/DATA/Documents/Bot_Trading/Historical_data"
# Create pair directory
dir.create(paste(data_path, pair, sep ="/"), showWarnings = FALSE)
# Fix path
pair_data_results <- paste(data_path, pair, sep ="/")
# Loading Data for operations --------------------------------------------------
options(digits = 5)
# Csv file saved with historical trades
file <- paste0(paste(pair_data_results, pair, sep = "/"), ".csv")
# Read it
frame <- fread(file)
# # Fix
frame[, Date_POSIXct := anytime(as.numeric(as.character(V3)))]
frame[, Time := strftime(Date_POSIXct, format = "%H:%M:%S")]
colnames(frame) <- c("price", "volume", "epoch_time", "buy_sell", "market_limit",
"miscellaneous", "last_id", "Date_POSIXct", "Time")
frame[, Date := as.Date(Date_POSIXct)]
frame[, Hour := substr(frame$Time, 1,5)]
frame[, miscellaneous := NULL]
# Choose Date Interval
frame1 <- subset(frame, frame$Date >= "2020-01-01")
frame1 <- unique(frame1)
rm(frame)
Kraken_intervals <- c("15 minutes") #, "30 minutes", "1 hour", "2 hour")
candle_list <- list()
for (i in 1:length(Kraken_intervals)) {
frame1$interval <- strftime(ceiling_date(as.POSIXct(frame1$Date_POSIXct), Kraken_intervals[i]) , format = '%H:%M:%S')
candles <- copy(frame1)
candle_list[[i]] <- candles[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
}
rm(candles)
rm(frame1)
# testing parameters
test_fast <- c(seq(5, 75, by = 5))
test_slow <- c(seq(20, 150, by = 10))
testing_params <- data.frame(f = rep(test_fast, length(test_slow)), s = rep(test_slow, each = length(test_fast)))
testing_params
testing_params$flag <- 1
testing_params$flag <- 1
testing_params
data.frame(tf = c(0.2,0.8), flag = 1)
data.frame(rsi_period = c(5, 10, 15, 20), flag = 1)
rss <- data.frame(rsi_period = c(5, 10, 15, 20), flag = 1)
rsi_p <- data.frame(rsi_period = c(5, 10, 15, 20), flag = 1)
upper <- data.frame(rsi_period = c(60, 65, 70, 75, 80), flag = 1)
upper
lower <- data.frame(low = c(40, 35, 30, 25, 20), flag = 1)
lower
tr <- data.frame(low = c(30, 70, 120, 150, 100), flag = 1)
tr
tr <- data.frame(tr = c(30, 70, 120, 150, 100), flag = 1)
tr_per <- data.frame(tr = c(10, 30, 50, 100), flag = 1)
tr_per
testing_params <- left_join(testing_params, rsi_p) %>% left_join(upper) %>%
left_join(lower) %>% left_join(tr) %>% left_join(tr)
# testing parameters
test_fast <- c(seq(5, 75, by = 5))
test_slow <- c(seq(20, 150, by = 10))
testing_params <- data.frame(f = rep(test_fast, length(test_slow)), s = rep(test_slow, each = length(test_fast)))
testing_params$flag <- 1
rsi_p <- data.frame(rsi_period = c(5, 10, 15, 20), flag = 1)
upper <- data.frame(up = c(60, 65, 70, 75, 80), flag = 1)
lower <- data.frame(low = c(40, 35, 30, 25, 20), flag = 1)
tr <- data.frame(tr = c(30, 70, 120, 150, 100), flag = 1)
tr_per <- data.frame(tr_per = c(10, 30, 50, 100), flag = 1)
testing_params <- left_join(testing_params, rsi_p) %>% left_join(upper) %>%
left_join(lower) %>% left_join(tr) %>% left_join(tr)
est_fast <- c(seq(5, 75, by = 5))
test_slow <- c(seq(20, 150, by = 10))
testing_params <- data.frame(f = rep(test_fast, length(test_slow)), s = rep(test_slow, each = length(test_fast)))
testing_params$flag <- 1
rsi_p <- data.frame(rsi_period = c(5, 10, 15, 20), flag = 1)
upper <- data.frame(up = c(60, 65, 70, 75, 80), flag = 1)
lower <- data.frame(low = c(40, 35, 30, 25, 20), flag = 1)
tr <- data.frame(tr = c(30, 70, 120, 150, 100), flag = 1)
tr_per <- data.frame(tr_per = c(10, 30, 50, 100), flag = 1)
testing_params <- left_join(testing_params, rsi_p) %>% left_join(upper) %>%
left_join(lower) %>% left_join(tr) %>% left_join(tr_per)
testing_params
# View(testing_params)
testing_params$flag <- NULL
testing_params$bool <- testing_params$f < testing_params$s
testing_params <- subset(testing_params, testing_params$bool == T)
View(testing_params)
# testing parameters
test_fast <- c(seq(5, 30, by = 5))
test_fast
test_slow <- c(seq(40, 100, by = 10))
test_slow
testing_params <- data.frame(f = rep(test_fast, length(test_slow)), s = rep(test_slow, each = length(test_fast)))
testing_params
testing_params$flag <- 1
rsi_p <- data.frame(rsi_period = c(5, 15, 25), flag = 1)
rsi_p <- data.frame(rsi_period = c(5, 15, 25), flag = 1)
upper <- data.frame(up = c(60, 70, 80), flag = 1)
lower <- data.frame(low = c(40, 30, 20), flag = 1)
tr <- data.frame(tr = c(30, 70, 120, 200), flag = 1)
tr_per <- data.frame(tr_per = c(30, 100), flag = 1)
testing_params <- left_join(testing_params, rsi_p) %>% left_join(upper) %>%
left_join(lower) %>% left_join(tr) %>% left_join(tr_per)
testing_params$flag <- NULL
testing_params$bool <- testing_params$f < testing_params$s
testing_params <- subset(testing_params, testing_params$bool == T)
View(testing_params)
frame1
View(candle_list)
# N Training -------------------------------------------------------------------
train_n <- ceiling(nrow(candle_list[[1]]) / 3)
train_n
train_data <- candle_list[[1]][1:train_n, ]
# Test, same -------------------------------------------------------------------
test_data <- candle_list[[1]][(train_n + 1):nrow(candle_list[[1]]), ]
test_data
initial_budget <- 500
vol <- data.frame(vol = c(5, 20, 40), flag = 1)
testing_params <- left_join(testing_params, rsi_p) %>% left_join(upper) %>%
left_join(lower) %>% left_join(tr) %>% left_join(tr_per)%>% left_join(vol)
# testing parameters
test_fast <- c(seq(5, 30, by = 5))
test_slow <- c(seq(40, 100, by = 10))
testing_params <- data.frame(f = rep(test_fast, length(test_slow)), s = rep(test_slow, each = length(test_fast)))
testing_params$flag <- 1
rsi_p <- data.frame(rsi_period = c(5, 15, 25), flag = 1)
upper <- data.frame(up = c(60, 70, 80), flag = 1)
lower <- data.frame(low = c(40, 30, 20), flag = 1)
tr <- data.frame(tr = c(30, 70, 120, 200), flag = 1)
tr_per <- data.frame(tr_per = c(30, 100), flag = 1)
vol <- data.frame(vol = c(5, 20, 40), flag = 1)
testing_params <- left_join(testing_params, rsi_p) %>% left_join(upper) %>%
left_join(lower) %>% left_join(tr) %>% left_join(tr_per)%>% left_join(vol)
testing_params$flag <- NULL
testing_params$bool <- testing_params$f < testing_params$s
testing_params <- subset(testing_params, testing_params$bool == T)
View(testing_params)
# N Training -------------------------------------------------------------------
train_n <- ceiling(nrow(candle_list[[1]]) / 3)
train_data <- candle_list[[1]][1:train_n, ]
# Test, same -------------------------------------------------------------------
test_data <- candle_list[[1]][(train_n + 1):nrow(candle_list[[1]]), ]
initial_budget <- 500
myresult <- list()
for (i in 1:nrow(testing_params)){
myresult[[i]] <- RSI_Swings(fast_EMA = testing_params$f[i], slow_EMA = testing_params$s[i], Volume_EMA = testing_params$vol[i], RSI_Period = testing_params$rsi_period[i],
upper_RSI_Bound = testing_params$up[i], lower_RSI_Bound = testing_params$low[i], stoploss = 0.01, trend = testing_params$tr[i],
trend_periods = testing_params$tr_per[i])
print(i/nrow(testing_params))
}
# testing parameters
test_fast <- c(seq(5, 30, by = 5))
test_slow <- c(seq(40, 100, by = 10))
test_fast <- 14
test_slow <- 65
testing_params <- data.frame(f = rep(test_fast, length(test_slow)), s = rep(test_slow, each = length(test_fast)))
testing_params
testing_params$flag <- 1
rsi_p <- data.frame(rsi_period = c(5, 15, 25), flag = 1)
upper <- data.frame(up = c(60, 70, 80), flag = 1)
lower <- data.frame(low = c(40, 30, 20), flag = 1)
tr <- data.frame(tr = c(30, 70, 120, 200), flag = 1)
tr_per <- data.frame(tr_per = c(30, 100), flag = 1)
vol <- data.frame(vol = c(5, 20, 40), flag = 1)
testing_params <- left_join(testing_params, rsi_p) %>% left_join(upper) %>%
left_join(lower) %>% left_join(tr) %>% left_join(tr_per)%>% left_join(vol)
testing_params$flag <- NULL
testing_params$bool <- testing_params$f < testing_params$s
testing_params <- subset(testing_params, testing_params$bool == T)
testing_params
# N Training -------------------------------------------------------------------
train_n <- ceiling(nrow(candle_list[[1]]) / 3)
train_data <- candle_list[[1]][1:train_n, ]
# Test, same -------------------------------------------------------------------
test_data <- candle_list[[1]][(train_n + 1):nrow(candle_list[[1]]), ]
initial_budget <- 500
myresult <- list()
for (i in 1:nrow(testing_params)){
myresult[[i]] <- RSI_Swings(fast_EMA = testing_params$f[i], slow_EMA = testing_params$s[i], Volume_EMA = testing_params$vol[i], RSI_Period = testing_params$rsi_period[i],
upper_RSI_Bound = testing_params$up[i], lower_RSI_Bound = testing_params$low[i], stoploss = 0.01, trend = testing_params$tr[i],
trend_periods = testing_params$tr_per[i])
print(i/nrow(testing_params))
}
myresult
length(myresult)
res <- list()
for( i in 1:length(myresult)){
res[[i]] <- calculate_profits(myresult[[i]])
}
final <- do.call(rbind, res)
final$params <- NULL
final_15min <- cbind(final, testing_params[1:length(myresult),])
final_15min$fees <- 1.5 *final_15min$n_trades
final_15min$clean_profit <- final_15min$profit- final_15min$fees
View(final_15min)
# Check all jobs
cron_ls()
# Description ------------------------------------------------------------------
# Scheduler for trading at the end of each candle and not intra-candle
library(cronR)
# Check all jobs
cron_ls()
rm(list = ls())
source(paste("/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1", "10 Utils.R", sep = "/"))
setDTthreads(1)
# API info
api_info <- read.table(paste("/media/chris/DATA/Documents/Bot_Trading", "API_Keys.txt", sep = "/"), sep = ";", header = T)
API_Key <- as.character(api_info$API_Key)
API_Sign <- as.character(api_info$API_Sign)
# Choose pair
pair <- "BTCEUR"
# Path to save results0
data_path <- "/media/chris/DATA/Documents/Bot_Trading/Historical_data"
# Create pair directory
dir.create(paste(data_path, pair, sep ="/"), showWarnings = FALSE)
# Fix path
pair_data_results <- paste(data_path, pair, sep ="/")
# Loading Data for operations --------------------------------------------------
options(digits = 5)
# Csv file saved with historical trades
file <- paste0(paste(pair_data_results, pair, sep = "/"), ".csv")
# Read it
frame <- fread(file)
# # Fix
frame[, Date_POSIXct := anytime(as.numeric(as.character(V3)))]
frame[, Time := strftime(Date_POSIXct, format = "%H:%M:%S")]
colnames(frame) <- c("price", "volume", "epoch_time", "buy_sell", "market_limit",
"miscellaneous", "last_id", "Date_POSIXct", "Time")
frame[, Date := as.Date(Date_POSIXct)]
frame[, Hour := substr(frame$Time, 1,5)]
frame[, miscellaneous := NULL]
# frame1 <- subset(frame1, frame1$Date >= "2019-12-01" & frame1$Date <= "2020-06-01")
frame1 <- subset(frame1, frame1$Date >= "2019-04-01")
# Select interval
frame1[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '60 minutes') , format = '%H:%M:%S')]
# Create candle stick dataset
candles <- frame1[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
dim(candles)
rm(list = ls())
source(paste("/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1", "10 Utils.R", sep = "/"))
setDTthreads(1)
# API info
api_info <- read.table(paste("/media/chris/DATA/Documents/Bot_Trading", "API_Keys.txt", sep = "/"), sep = ";", header = T)
API_Key <- as.character(api_info$API_Key)
API_Sign <- as.character(api_info$API_Sign)
# Choose pair
pair <- "BTCEUR"
# Path to save results0
data_path <- "/media/chris/DATA/Documents/Bot_Trading/Historical_data"
# Create pair directory
dir.create(paste(data_path, pair, sep ="/"), showWarnings = FALSE)
# Fix path
pair_data_results <- paste(data_path, pair, sep ="/")
# Loading Data for operations --------------------------------------------------
options(digits = 5)
# Csv file saved with historical trades
file <- paste0(paste(pair_data_results, pair, sep = "/"), ".csv")
# Read it
frame <- fread(file)
# # Fix
frame[, Date_POSIXct := anytime(as.numeric(as.character(V3)))]
frame[, Time := strftime(Date_POSIXct, format = "%H:%M:%S")]
colnames(frame) <- c("price", "volume", "epoch_time", "buy_sell", "market_limit",
"miscellaneous", "last_id", "Date_POSIXct", "Time")
frame[, Date := as.Date(Date_POSIXct)]
frame[, Hour := substr(frame$Time, 1,5)]
frame[, miscellaneous := NULL]
frame1 <- unique(frame)
# frame1 <- subset(frame1, frame1$Date >= "2019-12-01" & frame1$Date <= "2020-06-01")
frame1 <- subset(frame1, frame1$Date >= "2019-04-01")
# Select interval
frame1[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '60 minutes') , format = '%H:%M:%S')]
# Create candle stick dataset
candles <- frame1[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
dim(candles)
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1,
plot.it = F)
calculate_profits(myresult)
win_ratio(myresult)
rm(list = ls())
source(paste("/media/chris/DATA/Documents/Bot_Trading/Coinmaker_v0.1", "10 Utils.R", sep = "/"))
setDTthreads(1)
# API info
api_info <- read.table(paste("/media/chris/DATA/Documents/Bot_Trading", "API_Keys.txt", sep = "/"), sep = ";", header = T)
API_Key <- as.character(api_info$API_Key)
API_Sign <- as.character(api_info$API_Sign)
# Choose pair
# pair <- "BTCEUR"
pair <- "XETHZEUR"
# Path to save results0
data_path <- "/media/chris/DATA/Documents/Bot_Trading/Historical_data"
# Create pair directory
dir.create(paste(data_path, pair, sep ="/"), showWarnings = FALSE)
# Fix path
pair_data_results <- paste(data_path, pair, sep ="/")
# Loading Data for operations --------------------------------------------------
options(digits = 5)
# Csv file saved with historical trades
file <- paste0(paste(pair_data_results, pair, sep = "/"), ".csv")
# Read it
frame <- fread(file)
# # Fix
frame[, Date_POSIXct := anytime(as.numeric(as.character(V3)))]
frame[, Time := strftime(Date_POSIXct, format = "%H:%M:%S")]
colnames(frame) <- c("price", "volume", "epoch_time", "buy_sell", "market_limit",
"miscellaneous", "last_id", "Date_POSIXct", "Time")
frame[, Date := as.Date(Date_POSIXct)]
frame[, Hour := substr(frame$Time, 1,5)]
frame[, miscellaneous := NULL]
frame1 <- unique(frame)
# frame1 <- subset(frame1, frame1$Date >= "2019-12-01" & frame1$Date <= "2020-06-01")
frame1 <- subset(frame1, frame1$Date >= "2019-04-01")
# Select interval
frame1[, interval := strftime(ceiling_date(as.POSIXct(Date_POSIXct), '60 minutes') , format = '%H:%M:%S')]
# Create candle stick dataset
candles <- frame1[, .(high = max(price), low = min(price), open = first(price),
close = last(price), volume = sum(volume)),
by = .(Date, interval)]
dim(candles)
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1,
plot.it = F)
calculate_profits(myresult)
win_ratio(myresult)
# Close last position
if(myresult$action[nrow(myresult)] == "keep") {
myresult$action[nrow(myresult)] <- "sell"
myresult$Price[nrow(myresult)] <- myresult$close[nrow(myresult)] * myresult$Units[nrow(myresult)]
}
calculate_profits(myresult)
win_ratio(myresult)
# # Testing strategies ------------------------------------------------------------
paraller_exec <- FALSE
# Badget
initial_budget <- 500
# select period of data
candles_recent <- candles
#
# training data here is not the traditional training set, but more of a
# placeholder initial dataset to calculate the indicators
train_n <- ceiling(nrow(candles_recent) / 30)
train_data <- candles_recent[1:train_n, ]
test_data <- candles_recent[(train_n + 1):nrow(candles_recent), ]
myresult <- Splines_Tangent(spar = 0.95,
takeprofit = 0.015,
stoploss_trail = 1,
stoploss_ult = 1,
plot.it = T)
# Check all jobs
cron_ls()
# Check all jobs
cron_ls()
# Stop Job
# cron_clear(ask = FALSE)
cron_rm(id = "Live trading")
